<?xml version="1.0" encoding="UTF-8"?>
<Site BuildName="Linux-cc"
	BuildStamp="20230113-2049-Experimental"
	Name="DESKTOP-4R78PDH"
	Generator="ctest-3.22.1"
	CompilerName=""
	CompilerVersion=""
	OSName="Linux"
	Hostname="DESKTOP-4R78PDH"
	OSRelease="5.10.16.3-microsoft-standard-WSL2"
	OSVersion="#1 SMP Fri Apr 2 22:23:49 UTC 2021"
	OSPlatform="x86_64"
	Is64Bits="1"
	VendorString="GenuineIntel"
	VendorID="Intel Corporation"
	FamilyID="6"
	ModelID="151"
	ProcessorCacheSize="20480"
	NumberOfLogicalCPU="16"
	NumberOfPhysicalCPU="8"
	TotalVirtualMemory="4096"
	TotalPhysicalMemory="12614"
	LogicalProcessorsPerPhysical="2"
	ProcessorClockFrequency="3686.4"
	>
	<CoverageLog>
		<StartDateTime>Jan 13 21:49 CET</StartDateTime>
		<StartTime>1673642999</StartTime>
		<File Name="game.c" FullPath="./lib/game.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="48">game game_new(square *squares) {</Line>
				<Line Number="3" Count="48">    game g = malloc(sizeof(struct game_s));</Line>
				<Line Number="4" Count="48">    pointer_test(g, "malloc failed");</Line>
				<Line Number="5" Count="48">    g-&gt;game = malloc(sizeof(square) * (DEFAULT_SIZE * DEFAULT_SIZE));</Line>
				<Line Number="6" Count="48">    pointer_test(g-&gt;game, "malloc failed");</Line>
				<Line Number="7" Count="48">    memcpy(g-&gt;game, squares, sizeof(square) * (DEFAULT_SIZE * DEFAULT_SIZE));</Line>
				<Line Number="8" Count="48">    g-&gt;version = 1;</Line>
				<Line Number="9" Count="48">    return g;</Line>
				<Line Number="10" Count="-1">}</Line>
				<Line Number="11" Count="-1"></Line>
				<Line Number="12" Count="8">game game_new_empty(void) {</Line>
				<Line Number="13" Count="8">    square *squares = (square *)calloc(DEFAULT_SIZE * DEFAULT_SIZE, sizeof(square));</Line>
				<Line Number="14" Count="8">    pointer_test(squares, "malloc failed");</Line>
				<Line Number="15" Count="8">    game g = game_new(squares);</Line>
				<Line Number="16" Count="8">    cgame_test(g, "malloc failed");</Line>
				<Line Number="17" Count="8">    free(squares);</Line>
				<Line Number="18" Count="8">    g-&gt;version = 1;</Line>
				<Line Number="19" Count="8">    return g;</Line>
				<Line Number="20" Count="-1">}</Line>
				<Line Number="21" Count="-1"></Line>
				<Line Number="22" Count="4">game game_copy(cgame g) {</Line>
				<Line Number="23" Count="4">    cgame_test(g, "g is NULL");</Line>
				<Line Number="24" Count="4">    if (g-&gt;version == 2) {</Line>
				<Line Number="25" Count="2">        game copy = game_new_ext(game_nb_rows(g), game_nb_cols(g), g-&gt;game, g-&gt;wrapping, g-&gt;unique);</Line>
				<Line Number="26" Count="2">        game_test(copy, "malloc failed");</Line>
				<Line Number="27" Count="2">        return copy;</Line>
				<Line Number="28" Count="-1">    }</Line>
				<Line Number="29" Count="2">    game copy = game_new(g-&gt;game);</Line>
				<Line Number="30" Count="2">    game_test(copy, "malloc failed");</Line>
				<Line Number="31" Count="2">    return copy;</Line>
				<Line Number="32" Count="-1">}</Line>
				<Line Number="33" Count="-1"></Line>
				<Line Number="34" Count="20">bool game_equal(cgame g1, cgame g2) {</Line>
				<Line Number="35" Count="20">    if (g1 == NULL || g2 == NULL || g1-&gt;game == NULL || g2-&gt;game == NULL)</Line>
				<Line Number="36" Count="0">        return false;</Line>
				<Line Number="37" Count="20">    uint rows_g1 = (g1-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g1);</Line>
				<Line Number="38" Count="20">    uint cols_g1 = (g1-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g1);</Line>
				<Line Number="39" Count="20">    uint rows_g2 = (g2-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g2);</Line>
				<Line Number="40" Count="20">    uint cols_g2 = (g2-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g2);</Line>
				<Line Number="41" Count="20">    if (rows_g1 != rows_g2 || cols_g1 != cols_g2)</Line>
				<Line Number="42" Count="0">        return false;</Line>
				<Line Number="43" Count="120">    for (uint i = 0; i &lt; rows_g1; i++) {</Line>
				<Line Number="44" Count="674">        for (uint j = 0; j &lt; cols_g1; j++) {</Line>
				<Line Number="45" Count="574">            if (game_get_square(g1, i, j) != game_get_square(g2, i, j))</Line>
				<Line Number="46" Count="4">                return false;</Line>
				<Line Number="47" Count="-1">        }</Line>
				<Line Number="48" Count="-1">    }</Line>
				<Line Number="49" Count="16">    return true;</Line>
				<Line Number="50" Count="-1">}</Line>
				<Line Number="51" Count="-1"></Line>
				<Line Number="52" Count="128">void game_delete(game g) {</Line>
				<Line Number="53" Count="128">    if (g == NULL)</Line>
				<Line Number="54" Count="0">        return;</Line>
				<Line Number="55" Count="128">    if (g-&gt;game != NULL)</Line>
				<Line Number="56" Count="128">        free(g-&gt;game);</Line>
				<Line Number="57" Count="128">    if (g-&gt;version == 2) {</Line>
				<Line Number="58" Count="80">        ms_delete(g-&gt;history);</Line>
				<Line Number="59" Count="80">        ms_delete(g-&gt;backup);</Line>
				<Line Number="60" Count="-1">    }</Line>
				<Line Number="61" Count="128">    free(g);</Line>
				<Line Number="62" Count="-1">}</Line>
				<Line Number="63" Count="-1"></Line>
				<Line Number="64" Count="214">void game_set_square(game g, uint i, uint j, square s) {</Line>
				<Line Number="65" Count="214">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="66" Count="214">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="67" Count="214">    if (i &gt;= rows_g || j &gt;= cols_g)</Line>
				<Line Number="68" Count="0">        return;</Line>
				<Line Number="69" Count="214">    g-&gt;game[rows_g * i + j] = s;</Line>
				<Line Number="70" Count="-1">}</Line>
				<Line Number="71" Count="-1"></Line>
				<Line Number="72" Count="6220">square game_get_square(cgame g, uint i, uint j) {</Line>
				<Line Number="73" Count="6220">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="74" Count="6220">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="75" Count="6220">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="76" Count="6220">    if (i &gt;= rows_g || j &gt;= cols_g)</Line>
				<Line Number="77" Count="0">        throw_error("invalid index");</Line>
				<Line Number="78" Count="6220">    return g-&gt;game[cols_g * i + j];</Line>
				<Line Number="79" Count="-1">}</Line>
				<Line Number="80" Count="-1"></Line>
				<Line Number="81" Count="454">int game_get_number(cgame g, uint i, uint j) {</Line>
				<Line Number="82" Count="454">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="83" Count="454">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="84" Count="454">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="85" Count="454">    if (i &gt;= rows_g || j &gt;= cols_g)</Line>
				<Line Number="86" Count="0">        throw_error("i or j value is out of bounds!\n");</Line>
				<Line Number="87" Count="454">    uint index = rows_g * i + j;</Line>
				<Line Number="88" Count="454">    if (g-&gt;game[index] == S_EMPTY)</Line>
				<Line Number="89" Count="4">        return (-1);</Line>
				<Line Number="90" Count="450">    else if (g-&gt;game[index] == S_ZERO || g-&gt;game[index] == S_IMMUTABLE_ZERO)</Line>
				<Line Number="91" Count="254">        return (0);</Line>
				<Line Number="92" Count="-1">    else</Line>
				<Line Number="93" Count="196">        return (1);</Line>
				<Line Number="94" Count="-1">}</Line>
				<Line Number="95" Count="-1"></Line>
				<Line Number="96" Count="28">int game_get_next_square(cgame g, uint i, uint j, direction dir, uint dist) {</Line>
				<Line Number="97" Count="28">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="98" Count="28">    if (dist &gt; 2)</Line>
				<Line Number="99" Count="0">        throw_error("the distance value must be &lt;=2!\n");</Line>
				<Line Number="100" Count="28">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="101" Count="28">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="102" Count="28">    int findex = 0;</Line>
				<Line Number="103" Count="28">    if (g-&gt;version == 2 &amp;&amp; game_is_wrapping(g)) {</Line>
				<Line Number="104" Count="14">        if (dir == LEFT) {</Line>
				<Line Number="105" Count="6">            findex = (j - dist);</Line>
				<Line Number="106" Count="6">            j = findex &lt;= 0 ? (cols_g + findex) % cols_g : (j - dist) % cols_g;</Line>
				<Line Number="107" Count="8">        } else if (dir == RIGHT)</Line>
				<Line Number="108" Count="2">            j = (j + dist) % cols_g;</Line>
				<Line Number="109" Count="6">        else if (dir == UP) {</Line>
				<Line Number="110" Count="4">            findex = (i - dist);</Line>
				<Line Number="111" Count="4">            i = findex &lt;= 0 ? (rows_g + findex) % rows_g : (i - dist) % rows_g;</Line>
				<Line Number="112" Count="-1">        } else</Line>
				<Line Number="113" Count="2">            i = (i + dist) % rows_g;</Line>
				<Line Number="114" Count="-1">    } else {</Line>
				<Line Number="115" Count="14">        if (dir == LEFT &amp;&amp; dist &lt;= j)</Line>
				<Line Number="116" Count="2">            j -= dist;</Line>
				<Line Number="117" Count="12">        else if (dir == RIGHT &amp;&amp; (j + dist) &lt; cols_g)</Line>
				<Line Number="118" Count="6">            j += dist;</Line>
				<Line Number="119" Count="6">        else if (dir == UP &amp;&amp; dist &lt;= i)</Line>
				<Line Number="120" Count="2">            i -= dist;</Line>
				<Line Number="121" Count="4">        else if (dir == DOWN &amp;&amp; (i + dist) &lt; rows_g)</Line>
				<Line Number="122" Count="2">            i += dist;</Line>
				<Line Number="123" Count="-1">        else</Line>
				<Line Number="124" Count="2">            return (-1);</Line>
				<Line Number="125" Count="-1">    }</Line>
				<Line Number="126" Count="26">    return (game_get_square(g, i, j));</Line>
				<Line Number="127" Count="-1">}</Line>
				<Line Number="128" Count="-1"></Line>
				<Line Number="129" Count="28">int game_get_next_number(cgame g, uint i, uint j, direction dir, uint dist) {</Line>
				<Line Number="130" Count="28">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="131" Count="28">    if (dist &gt; 2)</Line>
				<Line Number="132" Count="0">        throw_error("the distance value must be &lt;=2!\n");</Line>
				<Line Number="133" Count="28">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="134" Count="28">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="135" Count="28">    int findex = 0;</Line>
				<Line Number="136" Count="28">    if (g-&gt;version == 2 &amp;&amp; game_is_wrapping(g)) {</Line>
				<Line Number="137" Count="14">        if (i &gt;= rows_g || j &gt;= cols_g)</Line>
				<Line Number="138" Count="0">            return (-1);</Line>
				<Line Number="139" Count="14">        if (dir == LEFT) {</Line>
				<Line Number="140" Count="6">            findex = (j - dist);</Line>
				<Line Number="141" Count="6">            j = findex &lt;= 0 ? (cols_g + findex) % cols_g : (j - dist) % cols_g;</Line>
				<Line Number="142" Count="8">        } else if (dir == RIGHT)</Line>
				<Line Number="143" Count="2">            j = (j + dist) % cols_g;</Line>
				<Line Number="144" Count="6">        else if (dir == UP) {</Line>
				<Line Number="145" Count="4">            findex = (i - dist);</Line>
				<Line Number="146" Count="4">            i = findex &lt;= 0 ? (rows_g + findex) % rows_g : (i - dist) % rows_g;</Line>
				<Line Number="147" Count="-1">        } else</Line>
				<Line Number="148" Count="2">            i = (i + dist) % rows_g;</Line>
				<Line Number="149" Count="-1">    } else {</Line>
				<Line Number="150" Count="14">        if (dir == LEFT &amp;&amp; dist &lt;= j)</Line>
				<Line Number="151" Count="2">            j -= dist;</Line>
				<Line Number="152" Count="12">        else if (dir == RIGHT &amp;&amp; (j + dist) &lt; cols_g)</Line>
				<Line Number="153" Count="6">            j += dist;</Line>
				<Line Number="154" Count="6">        else if (dir == UP &amp;&amp; dist &lt;= i)</Line>
				<Line Number="155" Count="2">            i -= dist;</Line>
				<Line Number="156" Count="4">        else if (dir == DOWN &amp;&amp; (i + dist) &lt; rows_g)</Line>
				<Line Number="157" Count="2">            i += dist;</Line>
				<Line Number="158" Count="-1">        else</Line>
				<Line Number="159" Count="2">            return (-1);</Line>
				<Line Number="160" Count="-1">    }</Line>
				<Line Number="161" Count="26">    return (game_get_number(g, i, j));</Line>
				<Line Number="162" Count="-1">}</Line>
				<Line Number="163" Count="-1"></Line>
				<Line Number="164" Count="134">bool game_is_empty(cgame g, uint i, uint j) {</Line>
				<Line Number="165" Count="134">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="166" Count="134">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="167" Count="134">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="168" Count="134">    assert(((i &lt; rows_g) &amp;&amp; (j &lt; cols_g)));</Line>
				<Line Number="169" Count="134">    return (game_get_square(g, i, j) == S_EMPTY);</Line>
				<Line Number="170" Count="-1">}</Line>
				<Line Number="171" Count="-1"></Line>
				<Line Number="172" Count="216">bool game_is_immutable(cgame g, uint i, uint j) {</Line>
				<Line Number="173" Count="216">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="174" Count="216">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="175" Count="216">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="176" Count="216">    assert(((i &lt; rows_g) &amp;&amp; (j &lt; cols_g)));</Line>
				<Line Number="177" Count="216">    square s = game_get_square(g, i, j);</Line>
				<Line Number="178" Count="216">    if (s == 3 || s == 4) {</Line>
				<Line Number="179" Count="54">        return true;</Line>
				<Line Number="180" Count="-1">    }</Line>
				<Line Number="181" Count="162">    return false;</Line>
				<Line Number="182" Count="-1">}</Line>
				<Line Number="183" Count="-1"></Line>
				<Line Number="184" Count="294">int game_has_error(cgame g, uint i, uint j) {</Line>
				<Line Number="185" Count="294">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="186" Count="-1"></Line>
				<Line Number="187" Count="294">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="188" Count="294">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="189" Count="294">    if (i &gt;= rows_g || j &gt;= cols_g)</Line>
				<Line Number="190" Count="0">        throw_error("i or j value is out of bounds!\n");</Line>
				<Line Number="191" Count="-1"></Line>
				<Line Number="192" Count="294">    if (g-&gt;version == 2 &amp;&amp; game_is_wrapping(g)) {</Line>
				<Line Number="193" Count="0">        if (is_consecutive_grid(g, i, j)) {</Line>
				<Line Number="194" Count="0">            return 1;</Line>
				<Line Number="195" Count="-1">        }</Line>
				<Line Number="196" Count="-1">    }</Line>
				<Line Number="197" Count="294">    if (g-&gt;version == 2 &amp;&amp; game_is_unique(g)) {</Line>
				<Line Number="198" Count="72">        if (!is_unique_array(g, i, j)) {</Line>
				<Line Number="199" Count="72">            return 1;</Line>
				<Line Number="200" Count="-1">        }</Line>
				<Line Number="201" Count="-1">    }</Line>
				<Line Number="202" Count="222">    square *row = get_row(g, i);</Line>
				<Line Number="203" Count="222">    square *col = get_col(g, j);</Line>
				<Line Number="204" Count="368">    if (is_consecutive(row, cols_g, game_get_number(g, i, j)) ||</Line>
				<Line Number="205" Count="146">        is_consecutive(col, rows_g, game_get_number(g, i, j))) {</Line>
				<Line Number="206" Count="78">        free(row);</Line>
				<Line Number="207" Count="78">        free(col);</Line>
				<Line Number="208" Count="78">        return 1;</Line>
				<Line Number="209" Count="-1">    }</Line>
				<Line Number="210" Count="144">    free(row);</Line>
				<Line Number="211" Count="144">    free(col);</Line>
				<Line Number="212" Count="144">    return 0;</Line>
				<Line Number="213" Count="-1">}</Line>
				<Line Number="214" Count="-1"></Line>
				<Line Number="215" Count="202">bool game_check_move(cgame g, uint i, uint j, square s) {</Line>
				<Line Number="216" Count="202">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="217" Count="202">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="218" Count="202">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="219" Count="202">    if ((i &gt; rows_g) || (j &gt; cols_g))</Line>
				<Line Number="220" Count="0">        return false;</Line>
				<Line Number="221" Count="202">    if (s == S_IMMUTABLE_ONE || s == S_IMMUTABLE_ZERO)</Line>
				<Line Number="222" Count="2">        return false;</Line>
				<Line Number="223" Count="200">    square c = game_get_square(g, i, j);</Line>
				<Line Number="224" Count="200">    if (c == S_IMMUTABLE_ONE || c == S_IMMUTABLE_ZERO)</Line>
				<Line Number="225" Count="36">        return false;</Line>
				<Line Number="226" Count="-1"></Line>
				<Line Number="227" Count="-1"></Line>
				<Line Number="228" Count="164">    return true;</Line>
				<Line Number="229" Count="-1">}</Line>
				<Line Number="230" Count="-1"></Line>
				<Line Number="231" Count="56">void game_play_move(game g, uint i, uint j, square s) {</Line>
				<Line Number="232" Count="56">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="233" Count="56">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="234" Count="56">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="235" Count="56">    assert(((i &lt; rows_g) &amp;&amp; (j &lt; cols_g)));</Line>
				<Line Number="236" Count="56">    if (game_check_move(g, i, j, s)) {</Line>
				<Line Number="237" Count="56">        if (g-&gt;version == 2) {</Line>
				<Line Number="238" Count="56">            if (g-&gt;backup != NULL &amp;&amp; g-&gt;history != NULL) {</Line>
				<Line Number="239" Count="56">                move m = move_create(i, j, s, game_get_square(g, i, j));</Line>
				<Line Number="240" Count="56">                ms_push(g-&gt;history, m);</Line>
				<Line Number="241" Count="56">                ms_clear(g-&gt;backup);</Line>
				<Line Number="242" Count="56">                free(m);</Line>
				<Line Number="243" Count="-1">            }</Line>
				<Line Number="244" Count="-1">        }</Line>
				<Line Number="245" Count="56">        game_set_square(g, i, j, s);</Line>
				<Line Number="246" Count="-1">    }</Line>
				<Line Number="247" Count="56">}</Line>
				<Line Number="248" Count="-1"></Line>
				<Line Number="249" Count="10">bool game_is_over(cgame g) {</Line>
				<Line Number="250" Count="10">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="251" Count="10">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="252" Count="10">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="253" Count="22">    for (uint i = 0; i &lt; rows_g; i++)</Line>
				<Line Number="254" Count="92">        for (uint j = 0; j &lt; cols_g; j++)</Line>
				<Line Number="255" Count="80">            if (game_is_empty(g, i, j) || game_has_error(g, i, j))</Line>
				<Line Number="256" Count="8">                return false;</Line>
				<Line Number="257" Count="2">    return true;</Line>
				<Line Number="258" Count="-1">}</Line>
				<Line Number="259" Count="-1"></Line>
				<Line Number="260" Count="2">void game_restart(game g) {</Line>
				<Line Number="261" Count="2">    pointer_test(g, "g is not initialized\n");</Line>
				<Line Number="262" Count="2">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="263" Count="2">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="264" Count="14">    for (uint i = 0; i &lt; rows_g; i++)</Line>
				<Line Number="265" Count="84">        for (uint j = 0; j &lt; cols_g; j++)</Line>
				<Line Number="266" Count="72">            if (!game_is_immutable(g, i, j))</Line>
				<Line Number="267" Count="54">                game_set_square(g, i, j, S_EMPTY);</Line>
				<Line Number="268" Count="2">    if (g-&gt;version == 2) {</Line>
				<Line Number="269" Count="0">        if (g-&gt;history != NULL)</Line>
				<Line Number="270" Count="0">            ms_clear(g-&gt;history);</Line>
				<Line Number="271" Count="0">        if (g-&gt;backup != NULL)</Line>
				<Line Number="272" Count="0">            ms_clear(g-&gt;backup);</Line>
				<Line Number="273" Count="-1">    }</Line>
				<Line Number="274" Count="2">}</Line>
			</Report>
		</File>
		<File Name="game_aux.c" FullPath="./lib/game_aux.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="0">void game_print(cgame g) {</Line>
				<Line Number="3" Count="0">    cgame_test(g, "g is not initialized\n");</Line>
				<Line Number="4" Count="0">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="5" Count="0">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="6" Count="0">    printf("cold: %d, row: %d\n", cols_g, rows_g);</Line>
				<Line Number="7" Count="0">    printf("   ");</Line>
				<Line Number="8" Count="0">    for (uint i = 0; i &lt; rows_g; i++) printf("%d", i);</Line>
				<Line Number="9" Count="0">    printf("\n   ");</Line>
				<Line Number="10" Count="0">    for (uint i = 0; i &lt; rows_g; i++) printf("-");</Line>
				<Line Number="11" Count="0">    printf("\n");</Line>
				<Line Number="12" Count="0">    for (uint i = 0; i &lt; rows_g; i++) {</Line>
				<Line Number="13" Count="0">        printf("%d |", i);</Line>
				<Line Number="14" Count="0">        for (uint j = 0; j &lt; cols_g; j++) {</Line>
				<Line Number="15" Count="0">            square s = game_get_square(g, i, j);</Line>
				<Line Number="16" Count="0">            if (s == S_EMPTY)</Line>
				<Line Number="17" Count="0">                printf(" ");</Line>
				<Line Number="18" Count="0">            else if (s == S_ZERO)</Line>
				<Line Number="19" Count="0">                printf("w");</Line>
				<Line Number="20" Count="0">            else if (s == S_ONE)</Line>
				<Line Number="21" Count="0">                printf("b");</Line>
				<Line Number="22" Count="0">            else if (s == S_IMMUTABLE_ZERO)</Line>
				<Line Number="23" Count="0">                printf("W");</Line>
				<Line Number="24" Count="0">            else if (s == S_IMMUTABLE_ONE)</Line>
				<Line Number="25" Count="0">                printf("B");</Line>
				<Line Number="26" Count="-1">        }</Line>
				<Line Number="27" Count="0">        printf("|\n");</Line>
				<Line Number="28" Count="-1">    }</Line>
				<Line Number="29" Count="0">    printf("   ");</Line>
				<Line Number="30" Count="0">    for (uint i = 0; i &lt; rows_g; i++) printf("-");</Line>
				<Line Number="31" Count="0">    printf("\n");</Line>
				<Line Number="32" Count="0">}</Line>
				<Line Number="33" Count="-1"></Line>
				<Line Number="34" Count="14">game game_default(void) {</Line>
				<Line Number="35" Count="14">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,</Line>
				<Line Number="36" Count="-1">                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};</Line>
				<Line Number="37" Count="14">    game g = game_new(squares);</Line>
				<Line Number="38" Count="14">    game_test(g, "g is not initialized\n");</Line>
				<Line Number="39" Count="14">    return g;</Line>
				<Line Number="40" Count="-1">}</Line>
				<Line Number="41" Count="-1"></Line>
				<Line Number="42" Count="6">game game_default_solution(void) {</Line>
				<Line Number="43" Count="6">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 4, 3, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2,</Line>
				<Line Number="44" Count="-1">                                                   2, 3, 4, 1, 1, 2, 1, 2, 4, 1, 2, 3, 2, 1, 1, 2, 2, 3};</Line>
				<Line Number="45" Count="6">    game g = game_new(squares);</Line>
				<Line Number="46" Count="6">    game_test(g, "g is not initialized\n");</Line>
				<Line Number="47" Count="6">    return g;</Line>
				<Line Number="48" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="game_ext.c" FullPath="./lib/game_ext.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="52">game game_new_ext(uint nb_rows, uint nb_cols, square *squares, bool wrapping, bool unique) {</Line>
				<Line Number="3" Count="52">    game g = malloc(sizeof(struct game_s));</Line>
				<Line Number="4" Count="52">    pointer_test(g, "game_nex_ext: game_ext malloc failed");</Line>
				<Line Number="5" Count="52">    pointer_test(squares, "game_nex_ext: squares is NULL");</Line>
				<Line Number="6" Count="52">    g-&gt;game = malloc(sizeof(square) * (nb_rows * nb_cols));</Line>
				<Line Number="7" Count="52">    pointer_test(g-&gt;game, "game_nex_ext: game malloc failed");</Line>
				<Line Number="8" Count="52">    memcpy(g-&gt;game, squares, sizeof(square) * (nb_rows * nb_cols));</Line>
				<Line Number="9" Count="52">    g-&gt;nb_rows = nb_rows;</Line>
				<Line Number="10" Count="52">    g-&gt;nb_cols = nb_cols;</Line>
				<Line Number="11" Count="52">    g-&gt;wrapping = wrapping;</Line>
				<Line Number="12" Count="52">    g-&gt;unique = unique;</Line>
				<Line Number="13" Count="52">    g-&gt;history = ms_create(1);</Line>
				<Line Number="14" Count="52">    g-&gt;backup = ms_create(1);</Line>
				<Line Number="15" Count="52">    g-&gt;version = 2;</Line>
				<Line Number="16" Count="52">    return g;</Line>
				<Line Number="17" Count="-1">}</Line>
				<Line Number="18" Count="-1"></Line>
				<Line Number="19" Count="28">game game_new_empty_ext(uint nb_rows, uint nb_cols, bool wrapping, bool unique) {</Line>
				<Line Number="20" Count="28">    game g = malloc(sizeof(struct game_s));</Line>
				<Line Number="21" Count="28">    pointer_test(g, "game_nex_ext: game_ext malloc failed");</Line>
				<Line Number="22" Count="28">    g-&gt;game = malloc(sizeof(square) * (nb_rows * nb_cols));</Line>
				<Line Number="23" Count="28">    pointer_test(g-&gt;game, "game_nex_ext: game malloc failed");</Line>
				<Line Number="24" Count="28">    memset(g-&gt;game, 0, sizeof(square) * (nb_rows * nb_cols));</Line>
				<Line Number="25" Count="28">    g-&gt;nb_rows = nb_rows;</Line>
				<Line Number="26" Count="28">    g-&gt;nb_cols = nb_cols;</Line>
				<Line Number="27" Count="28">    g-&gt;wrapping = wrapping;</Line>
				<Line Number="28" Count="28">    g-&gt;unique = unique;</Line>
				<Line Number="29" Count="28">    g-&gt;history = ms_create(1);</Line>
				<Line Number="30" Count="28">    g-&gt;backup = ms_create(1);</Line>
				<Line Number="31" Count="28">    g-&gt;version = 2;</Line>
				<Line Number="32" Count="28">    return g;</Line>
				<Line Number="33" Count="-1">}</Line>
				<Line Number="34" Count="-1"></Line>
				<Line Number="35" Count="4258">uint game_nb_rows(cgame g) {</Line>
				<Line Number="36" Count="4258">    cgame_test(g, "g is NULL");</Line>
				<Line Number="37" Count="4258">    return g-&gt;nb_rows;</Line>
				<Line Number="38" Count="-1">}</Line>
				<Line Number="39" Count="-1"></Line>
				<Line Number="40" Count="4400">uint game_nb_cols(cgame g) {</Line>
				<Line Number="41" Count="4400">    cgame_test(g, "g is NULL");</Line>
				<Line Number="42" Count="4400">    return g-&gt;nb_cols;</Line>
				<Line Number="43" Count="-1">}</Line>
				<Line Number="44" Count="-1"></Line>
				<Line Number="45" Count="192">bool game_is_wrapping(cgame g) {</Line>
				<Line Number="46" Count="192">    cgame_test(g, "g is NULL");</Line>
				<Line Number="47" Count="192">    return g-&gt;wrapping;</Line>
				<Line Number="48" Count="-1">}</Line>
				<Line Number="49" Count="-1"></Line>
				<Line Number="50" Count="166">bool game_is_unique(cgame g) {</Line>
				<Line Number="51" Count="166">    cgame_test(g, "g is NULL");</Line>
				<Line Number="52" Count="166">    return g-&gt;unique;</Line>
				<Line Number="53" Count="-1">}</Line>
				<Line Number="54" Count="-1"></Line>
				<Line Number="55" Count="16">void game_undo(game g) {</Line>
				<Line Number="56" Count="16">    cgame_test(g, "g is NULL");</Line>
				<Line Number="57" Count="16">    if (ms_is_empty(g-&gt;history)) {</Line>
				<Line Number="58" Count="0">        printf("game_undo: history is empty\n");</Line>
				<Line Number="59" Count="0">        return;</Line>
				<Line Number="60" Count="-1">    }</Line>
				<Line Number="61" Count="16">    game_set_square(g, ms_top_row(g-&gt;history), ms_top_col(g-&gt;history), ms_top_p(g-&gt;history));</Line>
				<Line Number="62" Count="16">    ms_push(g-&gt;backup, ms_top(g-&gt;history));</Line>
				<Line Number="63" Count="16">    ms_pop(g-&gt;history);</Line>
				<Line Number="64" Count="-1">}</Line>
				<Line Number="65" Count="-1"></Line>
				<Line Number="66" Count="6">void game_redo(game g) {</Line>
				<Line Number="67" Count="6">    cgame_test(g, "g is NULL");</Line>
				<Line Number="68" Count="6">    if (ms_is_empty(g-&gt;backup)) {</Line>
				<Line Number="69" Count="0">        printf("game_redo: backup is empty\n");</Line>
				<Line Number="70" Count="0">        return;</Line>
				<Line Number="71" Count="-1">    }</Line>
				<Line Number="72" Count="6">    game_set_square(g, ms_top_row(g-&gt;backup), ms_top_col(g-&gt;backup), ms_top_s(g-&gt;backup));</Line>
				<Line Number="73" Count="6">    ms_push(g-&gt;history, ms_top(g-&gt;backup));</Line>
				<Line Number="74" Count="6">    ms_pop(g-&gt;backup);</Line>
				<Line Number="75" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="mode_error.c" FullPath="./lib/mode_error.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="6">void print_array(square *array, uint size) {</Line>
				<Line Number="3" Count="42">    for (uint i = 0; i &lt; size; i++) {</Line>
				<Line Number="4" Count="36">        printf("[%d] ", array[i]);</Line>
				<Line Number="5" Count="-1">    }</Line>
				<Line Number="6" Count="6">    printf("\n");</Line>
				<Line Number="7" Count="6">}</Line>
				<Line Number="8" Count="-1"></Line>
				<Line Number="9" Count="392">square *get_row(cgame g, uint i) {</Line>
				<Line Number="10" Count="392">    cgame_test(g, "g is NULL");</Line>
				<Line Number="11" Count="392">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="12" Count="392">    square *row = malloc(sizeof(square) * cols_g);</Line>
				<Line Number="13" Count="392">    pointer_test(row, "malloc failed");</Line>
				<Line Number="14" Count="2716">    for (uint j = 0; j &lt; cols_g; j++) row[j] = game_get_square(g, i, j);</Line>
				<Line Number="15" Count="392">    return row;</Line>
				<Line Number="16" Count="-1">}</Line>
				<Line Number="17" Count="-1"></Line>
				<Line Number="18" Count="246">square *get_col(cgame g, uint j) {</Line>
				<Line Number="19" Count="246">    cgame_test(g, "g is NULL");</Line>
				<Line Number="20" Count="246">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="21" Count="246">    square *col = malloc(sizeof(square) * rows_g);</Line>
				<Line Number="22" Count="246">    pointer_test(col, "malloc failed");</Line>
				<Line Number="23" Count="1690">    for (uint i = 0; i &lt; rows_g; i++) {</Line>
				<Line Number="24" Count="1444">        col[i] = game_get_square(g, i, j);</Line>
				<Line Number="25" Count="-1">    }</Line>
				<Line Number="26" Count="246">    return col;</Line>
				<Line Number="27" Count="-1">}</Line>
				<Line Number="28" Count="-1"></Line>
				<Line Number="29" Count="56">void rotate_array(square *array, uint size) {</Line>
				<Line Number="30" Count="56">    pointer_test(array, "array is NULL");</Line>
				<Line Number="31" Count="56">    square start = array[0];</Line>
				<Line Number="32" Count="336">    for (uint i = 0; i &lt; size - 1; i++) array[i] = array[i + 1];</Line>
				<Line Number="33" Count="56">    array[size - 1] = start;</Line>
				<Line Number="34" Count="56">}</Line>
				<Line Number="35" Count="-1"></Line>
				<Line Number="36" Count="4540">int get_number(int s) {</Line>
				<Line Number="37" Count="4540">    if (s == 0) {</Line>
				<Line Number="38" Count="10">        return -1;</Line>
				<Line Number="39" Count="4530">    } else if (s == 1 || s == 3) {</Line>
				<Line Number="40" Count="2332">        return 0;</Line>
				<Line Number="41" Count="-1">    }</Line>
				<Line Number="42" Count="2198">    return 1;</Line>
				<Line Number="43" Count="-1">}</Line>
				<Line Number="44" Count="-1"></Line>
				<Line Number="45" Count="418">bool is_consecutive(square *array, uint size, int current) {</Line>
				<Line Number="46" Count="418">    if (current == -1)</Line>
				<Line Number="47" Count="0">        return false;</Line>
				<Line Number="48" Count="-1"></Line>
				<Line Number="49" Count="418">    uint consecutive = 0;</Line>
				<Line Number="50" Count="418">    uint current_counter = 0;</Line>
				<Line Number="51" Count="2710">    for (uint i = 0; i &lt; size; i++) {</Line>
				<Line Number="52" Count="2382">        if (get_number(array[i]) == current) {</Line>
				<Line Number="53" Count="1264">            if (++current_counter &gt; (size / 2) + (size % 2)) {</Line>
				<Line Number="54" Count="10">                return true;</Line>
				<Line Number="55" Count="-1">            }</Line>
				<Line Number="56" Count="1254">            if (++consecutive &gt;= size / 2) {</Line>
				<Line Number="57" Count="80">                return true;</Line>
				<Line Number="58" Count="-1">            }</Line>
				<Line Number="59" Count="-1">        } else</Line>
				<Line Number="60" Count="1118">            consecutive = 0;</Line>
				<Line Number="61" Count="-1">    }</Line>
				<Line Number="62" Count="328">    return false;</Line>
				<Line Number="63" Count="-1">}</Line>
				<Line Number="64" Count="-1"></Line>
				<Line Number="65" Count="8">bool is_consecutive_grid(cgame g, uint i, uint j) {</Line>
				<Line Number="66" Count="8">    square *tabRows = get_row(g, i);</Line>
				<Line Number="67" Count="8">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="68" Count="8">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="69" Count="32">    for (uint x = 0; x &lt; cols_g; x++) {</Line>
				<Line Number="70" Count="28">        rotate_array(tabRows, cols_g);</Line>
				<Line Number="71" Count="28">        if (is_consecutive(tabRows, cols_g, game_get_number(g, i, j))) {</Line>
				<Line Number="72" Count="4">            free(tabRows);</Line>
				<Line Number="73" Count="4">            return true;</Line>
				<Line Number="74" Count="-1">        }</Line>
				<Line Number="75" Count="-1">    }</Line>
				<Line Number="76" Count="4">    free(tabRows);</Line>
				<Line Number="77" Count="4">    square *tabCols = get_col(g, j);</Line>
				<Line Number="78" Count="16">    for (uint y = 0; y &lt; rows_g; y++) {</Line>
				<Line Number="79" Count="14">        rotate_array(tabCols, rows_g);</Line>
				<Line Number="80" Count="14">        if (is_consecutive(tabCols, rows_g, game_get_number(g, i, j))) {</Line>
				<Line Number="81" Count="2">            free(tabCols);</Line>
				<Line Number="82" Count="2">            return true;</Line>
				<Line Number="83" Count="-1">        }</Line>
				<Line Number="84" Count="-1">    }</Line>
				<Line Number="85" Count="2">    free(tabCols);</Line>
				<Line Number="86" Count="2">    return false;</Line>
				<Line Number="87" Count="-1">}</Line>
				<Line Number="88" Count="-1"></Line>
				<Line Number="89" Count="120">bool is_array_same(square *array1, square *array2, uint size) {</Line>
				<Line Number="90" Count="684">    for (uint i = 0; i &lt; size; i++) {</Line>
				<Line Number="91" Count="590">        if (get_number(array1[i]) != get_number(array2[i])) {</Line>
				<Line Number="92" Count="26">            return false;</Line>
				<Line Number="93" Count="-1">        }</Line>
				<Line Number="94" Count="-1">    }</Line>
				<Line Number="95" Count="94">    return true;</Line>
				<Line Number="96" Count="-1">}</Line>
				<Line Number="97" Count="-1"></Line>
				<Line Number="98" Count="174">bool is_array_full(square *array, uint size) {</Line>
				<Line Number="99" Count="1136">    for (uint i = 0; i &lt; size; i++) {</Line>
				<Line Number="100" Count="968">        if (get_number(array[i]) == -1)</Line>
				<Line Number="101" Count="6">            return false;</Line>
				<Line Number="102" Count="-1">    }</Line>
				<Line Number="103" Count="168">    return true;</Line>
				<Line Number="104" Count="-1">}</Line>
				<Line Number="105" Count="-1"></Line>
				<Line Number="106" Count="78">bool is_unique_array(cgame g, uint i, uint j) {</Line>
				<Line Number="107" Count="78">    uint rows_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_rows(g);</Line>
				<Line Number="108" Count="78">    uint cols_g = (g-&gt;version == 1) ? DEFAULT_SIZE : game_nb_cols(g);</Line>
				<Line Number="109" Count="78">    square *row_i = get_row(g, i);</Line>
				<Line Number="110" Count="78">    if (is_array_full(row_i, cols_g)) {</Line>
				<Line Number="111" Count="98">        for (uint x = 0; x &lt; rows_g; x++) {</Line>
				<Line Number="112" Count="96">            if (x != i) {</Line>
				<Line Number="113" Count="80">                square *row_x = get_row(g, x);</Line>
				<Line Number="114" Count="80">                if (is_array_full(row_x, cols_g)) {</Line>
				<Line Number="115" Count="80">                    if (is_array_same(row_i, row_x, cols_g)) {</Line>
				<Line Number="116" Count="74">                        free(row_x);</Line>
				<Line Number="117" Count="74">                        free(row_i);</Line>
				<Line Number="118" Count="74">                        return false;</Line>
				<Line Number="119" Count="-1">                    }</Line>
				<Line Number="120" Count="-1">                }</Line>
				<Line Number="121" Count="6">                free(row_x);</Line>
				<Line Number="122" Count="-1">            }</Line>
				<Line Number="123" Count="-1">        }</Line>
				<Line Number="124" Count="-1">    }</Line>
				<Line Number="125" Count="4">    free(row_i);</Line>
				<Line Number="126" Count="-1"></Line>
				<Line Number="127" Count="4">    square *col_j = get_col(g, j);</Line>
				<Line Number="128" Count="4">    if (is_array_full(col_j, rows_g)) {</Line>
				<Line Number="129" Count="18">        for (uint y = 0; y &lt; cols_g; y++) {</Line>
				<Line Number="130" Count="16">            if (y != j) {</Line>
				<Line Number="131" Count="12">                square *col_y = get_col(g, y);</Line>
				<Line Number="132" Count="12">                if (is_array_full(col_y, rows_g)) {</Line>
				<Line Number="133" Count="8">                    if (is_array_same(col_j, col_y, rows_g)) {</Line>
				<Line Number="134" Count="2">                        free(col_y);</Line>
				<Line Number="135" Count="2">                        free(col_j);</Line>
				<Line Number="136" Count="2">                        return false;</Line>
				<Line Number="137" Count="-1">                    }</Line>
				<Line Number="138" Count="-1">                }</Line>
				<Line Number="139" Count="10">                free(col_y);</Line>
				<Line Number="140" Count="-1">            }</Line>
				<Line Number="141" Count="-1">        }</Line>
				<Line Number="142" Count="-1">    }</Line>
				<Line Number="143" Count="2">    free(col_j);</Line>
				<Line Number="144" Count="2">    return true;</Line>
				<Line Number="145" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="move.c" FullPath="./lib/move.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="234">move move_create(uint row, uint col, square s, square p) {</Line>
				<Line Number="3" Count="234">    move m = malloc(sizeof(struct move_s));</Line>
				<Line Number="4" Count="234">    pointer_test(m, "move_create: malloc failed");</Line>
				<Line Number="5" Count="234">    m-&gt;row = row;</Line>
				<Line Number="6" Count="234">    m-&gt;col = col;</Line>
				<Line Number="7" Count="234">    m-&gt;s = s;</Line>
				<Line Number="8" Count="234">    m-&gt;p = p;</Line>
				<Line Number="9" Count="234">    return m;</Line>
				<Line Number="10" Count="-1">}</Line>
				<Line Number="11" Count="-1"></Line>
				<Line Number="12" Count="176">void move_delete(move m) {</Line>
				<Line Number="13" Count="176">    if (m != NULL)</Line>
				<Line Number="14" Count="176">        free(m);</Line>
				<Line Number="15" Count="176">    m = NULL;</Line>
				<Line Number="16" Count="176">}</Line>
				<Line Number="17" Count="-1"></Line>
				<Line Number="18" Count="154">uint move_row(move m) {</Line>
				<Line Number="19" Count="154">    pointer_test(m, "move_row: move is NULL");</Line>
				<Line Number="20" Count="154">    return m-&gt;row;</Line>
				<Line Number="21" Count="-1">}</Line>
				<Line Number="22" Count="154">uint move_col(move m) {</Line>
				<Line Number="23" Count="154">    pointer_test(m, "move_col: move is NULL");</Line>
				<Line Number="24" Count="154">    return m-&gt;col;</Line>
				<Line Number="25" Count="-1">}</Line>
				<Line Number="26" Count="138">square move_s(move m) {</Line>
				<Line Number="27" Count="138">    pointer_test(m, "move_s: move is NULL");</Line>
				<Line Number="28" Count="138">    return m-&gt;s;</Line>
				<Line Number="29" Count="-1">}</Line>
				<Line Number="30" Count="148">square move_p(move m) {</Line>
				<Line Number="31" Count="148">    pointer_test(m, "move_p: move is NULL");</Line>
				<Line Number="32" Count="148">    return m-&gt;p;</Line>
				<Line Number="33" Count="-1">}</Line>
				<Line Number="34" Count="-1"></Line>
				<Line Number="35" Count="4">void move_print(move m) {</Line>
				<Line Number="36" Count="4">    pointer_test(m, "move_print: move is NULL");</Line>
				<Line Number="37" Count="4">    printf("[%d] [%d] [%d] [%d]\n", m-&gt;row, m-&gt;col, m-&gt;s, m-&gt;p);</Line>
				<Line Number="38" Count="4">}</Line>
			</Report>
		</File>
		<File Name="move_stack.c" FullPath="./lib/move_stack.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="188">ms ms_create(uint capacity) {</Line>
				<Line Number="3" Count="188">    ms stack = malloc(sizeof(struct move_stack_s));</Line>
				<Line Number="4" Count="188">    pointer_test(stack, "ms_create: stack malloc failed");</Line>
				<Line Number="5" Count="188">    stack-&gt;data = malloc(sizeof(move) * capacity);</Line>
				<Line Number="6" Count="188">    pointer_test(stack-&gt;data, "ms_create: data malloc failed");</Line>
				<Line Number="7" Count="188">    stack-&gt;size = 0;</Line>
				<Line Number="8" Count="188">    stack-&gt;capacity = capacity;</Line>
				<Line Number="9" Count="188">    return stack;</Line>
				<Line Number="10" Count="-1">}</Line>
				<Line Number="11" Count="190">void ms_delete(ms stack) {</Line>
				<Line Number="12" Count="190">    if (stack != NULL) {</Line>
				<Line Number="13" Count="258">        for (uint i = 0; i &lt; stack-&gt;size; i++) move_delete(stack-&gt;data[i]);</Line>
				<Line Number="14" Count="188">        free(stack-&gt;data);</Line>
				<Line Number="15" Count="188">        free(stack);</Line>
				<Line Number="16" Count="-1">    }</Line>
				<Line Number="17" Count="190">}</Line>
				<Line Number="18" Count="-1"></Line>
				<Line Number="19" Count="24">void ms_double_capacity(ms stack) {</Line>
				<Line Number="20" Count="24">    stack-&gt;capacity *= 2;</Line>
				<Line Number="21" Count="24">    stack-&gt;data = realloc(stack-&gt;data, sizeof(move) * stack-&gt;capacity);</Line>
				<Line Number="22" Count="24">    pointer_test(stack-&gt;data, "ms_double_capacity: realloc failed");</Line>
				<Line Number="23" Count="24">}</Line>
				<Line Number="24" Count="-1"></Line>
				<Line Number="25" Count="172">move ms_top(ms stack) {</Line>
				<Line Number="26" Count="172">    if (ms_is_empty(stack))</Line>
				<Line Number="27" Count="4">        return NULL;</Line>
				<Line Number="28" Count="168">    return stack-&gt;data[stack-&gt;size - 1];</Line>
				<Line Number="29" Count="-1">}</Line>
				<Line Number="30" Count="116">void ms_push(ms stack, move m) {</Line>
				<Line Number="31" Count="116">    if (ms_is_full(stack))</Line>
				<Line Number="32" Count="22">        ms_double_capacity(stack);</Line>
				<Line Number="33" Count="116">    move new = move_create(move_row(m), move_col(m), move_s(m), move_p(m));</Line>
				<Line Number="34" Count="116">    stack-&gt;data[stack-&gt;size] = new;</Line>
				<Line Number="35" Count="116">    stack-&gt;size++;</Line>
				<Line Number="36" Count="116">}</Line>
				<Line Number="37" Count="48">void ms_pop(ms stack) {</Line>
				<Line Number="38" Count="48">    if (ms_is_empty(stack))</Line>
				<Line Number="39" Count="2">        return;</Line>
				<Line Number="40" Count="46">    move_delete(ms_top(stack));</Line>
				<Line Number="41" Count="46">    stack-&gt;size--;</Line>
				<Line Number="42" Count="-1">}</Line>
				<Line Number="43" Count="58">void ms_clear(ms stack) {</Line>
				<Line Number="44" Count="68">    while (!ms_is_empty(stack)) ms_pop(stack);</Line>
				<Line Number="45" Count="58">}</Line>
				<Line Number="46" Count="-1"></Line>
				<Line Number="47" Count="34">int ms_top_row(ms stack) {</Line>
				<Line Number="48" Count="34">    if (ms_is_empty(stack))</Line>
				<Line Number="49" Count="4">        return -1;</Line>
				<Line Number="50" Count="30">    return move_row(ms_top(stack));</Line>
				<Line Number="51" Count="-1">}</Line>
				<Line Number="52" Count="32">int ms_top_col(ms stack) {</Line>
				<Line Number="53" Count="32">    if (ms_is_empty(stack))</Line>
				<Line Number="54" Count="2">        return -1;</Line>
				<Line Number="55" Count="30">    return move_col(ms_top(stack));</Line>
				<Line Number="56" Count="-1">}</Line>
				<Line Number="57" Count="16">int ms_top_s(ms stack) {</Line>
				<Line Number="58" Count="16">    if (ms_is_empty(stack))</Line>
				<Line Number="59" Count="2">        return -2;</Line>
				<Line Number="60" Count="14">    return move_s(ms_top(stack));</Line>
				<Line Number="61" Count="-1">}</Line>
				<Line Number="62" Count="26">int ms_top_p(ms stack) {</Line>
				<Line Number="63" Count="26">    if (ms_is_empty(stack))</Line>
				<Line Number="64" Count="2">        return -2;</Line>
				<Line Number="65" Count="24">    return move_p(ms_top(stack));</Line>
				<Line Number="66" Count="-1">}</Line>
				<Line Number="67" Count="-1"></Line>
				<Line Number="68" Count="424">bool ms_is_empty(ms stack) {</Line>
				<Line Number="69" Count="424">    if (stack == NULL)</Line>
				<Line Number="70" Count="0">        return true;</Line>
				<Line Number="71" Count="424">    return stack-&gt;size == 0;</Line>
				<Line Number="72" Count="-1">}</Line>
				<Line Number="73" Count="126">bool ms_is_full(ms stack) {</Line>
				<Line Number="74" Count="126">    if (stack == NULL)</Line>
				<Line Number="75" Count="2">        return false;</Line>
				<Line Number="76" Count="124">    return stack-&gt;size == stack-&gt;capacity;</Line>
				<Line Number="77" Count="-1">}</Line>
				<Line Number="78" Count="-1"></Line>
				<Line Number="79" Count="2">void ms_print(ms stack) {</Line>
				<Line Number="80" Count="2">    printf("move_stack: size=%d, capacity=%d\n", stack-&gt;size, stack-&gt;capacity);</Line>
				<Line Number="81" Count="6">    for (uint i = 0; i &lt; stack-&gt;size; i++) {</Line>
				<Line Number="82" Count="4">        printf("[%d] [%d] [%d] [%d]\n", move_row(stack-&gt;data[i]), move_col(stack-&gt;data[i]), move_s(stack-&gt;data[i]),</Line>
				<Line Number="83" Count="4">               move_p(stack-&gt;data[i]));</Line>
				<Line Number="84" Count="-1">    }</Line>
				<Line Number="85" Count="2">}</Line>
			</Report>
		</File>
		<File Name="throw_assert.c" FullPath="./lib/throw_assert.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="2">bool throw_error(char *msg) {</Line>
				<Line Number="3" Count="2">    if (!msg)</Line>
				<Line Number="4" Count="2">        return false;</Line>
				<Line Number="5" Count="0">    fprintf(stderr, "[error] %s\n", msg);</Line>
				<Line Number="6" Count="0">    exit(EXIT_FAILURE);</Line>
				<Line Number="7" Count="-1">}</Line>
				<Line Number="8" Count="-1"></Line>
				<Line Number="9" Count="26">bool game_test(game g, char *msg) {</Line>
				<Line Number="10" Count="26">    if (!g)</Line>
				<Line Number="11" Count="0">        throw_error(msg);</Line>
				<Line Number="12" Count="26">    return true;</Line>
				<Line Number="13" Count="-1">}</Line>
				<Line Number="14" Count="-1"></Line>
				<Line Number="15" Count="17332">bool cgame_test(cgame g, char *msg) {</Line>
				<Line Number="16" Count="17332">    if (!g)</Line>
				<Line Number="17" Count="0">        throw_error(msg);</Line>
				<Line Number="18" Count="17332">    return true;</Line>
				<Line Number="19" Count="-1">}</Line>
				<Line Number="20" Count="-1"></Line>
				<Line Number="21" Count="2246">bool pointer_test(void *ptr, char *msg) {</Line>
				<Line Number="22" Count="2246">    if (!ptr)</Line>
				<Line Number="23" Count="0">        throw_error(msg);</Line>
				<Line Number="24" Count="2246">    return true;</Line>
				<Line Number="25" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="test_game.c" FullPath="./tests/test_game.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="2">bool test_game_new(void) {</Line>
				<Line Number="3" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,</Line>
				<Line Number="4" Count="-1">                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};</Line>
				<Line Number="5" Count="2">    game g = game_new(squares);</Line>
				<Line Number="6" Count="2">    game g2 = game_default();</Line>
				<Line Number="7" Count="-1"></Line>
				<Line Number="8" Count="2">    if (g == NULL || g2 == NULL)</Line>
				<Line Number="9" Count="0">        return false;</Line>
				<Line Number="10" Count="2">    if (!game_equal(g, g2)) {</Line>
				<Line Number="11" Count="0">        game_delete(g);</Line>
				<Line Number="12" Count="0">        game_delete(g2);</Line>
				<Line Number="13" Count="0">        return false;</Line>
				<Line Number="14" Count="-1">    }</Line>
				<Line Number="15" Count="2">    game_delete(g);</Line>
				<Line Number="16" Count="2">    game_delete(g2);</Line>
				<Line Number="17" Count="2">    return true;</Line>
				<Line Number="18" Count="-1">}</Line>
				<Line Number="19" Count="-1"></Line>
				<Line Number="20" Count="2">bool test_game_new_empty(void) {</Line>
				<Line Number="21" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,</Line>
				<Line Number="22" Count="-1">                                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};</Line>
				<Line Number="23" Count="2">    game g1 = game_new(squares);</Line>
				<Line Number="24" Count="2">    game g2 = game_new_empty();</Line>
				<Line Number="25" Count="-1"></Line>
				<Line Number="26" Count="2">    if (g1 == NULL || g2 == NULL)</Line>
				<Line Number="27" Count="0">        return false;</Line>
				<Line Number="28" Count="2">    if (!game_equal(g1, g2)) {</Line>
				<Line Number="29" Count="0">        game_delete(g1);</Line>
				<Line Number="30" Count="0">        game_delete(g2);</Line>
				<Line Number="31" Count="0">        return false;</Line>
				<Line Number="32" Count="-1">    }</Line>
				<Line Number="33" Count="2">    game_delete(g1);</Line>
				<Line Number="34" Count="2">    game_delete(g2);</Line>
				<Line Number="35" Count="2">    return true;</Line>
				<Line Number="36" Count="-1">}</Line>
				<Line Number="37" Count="-1"></Line>
				<Line Number="38" Count="2">bool test_game_copy(void) {</Line>
				<Line Number="39" Count="2">    game g1 = game_default();</Line>
				<Line Number="40" Count="2">    game g1_copy = game_copy(g1);</Line>
				<Line Number="41" Count="2">    game g2 = game_new_empty_ext(8, 4, false, true);</Line>
				<Line Number="42" Count="2">    game_set_square(g2, 0, 0, S_IMMUTABLE_ZERO);</Line>
				<Line Number="43" Count="2">    game_set_square(g2, 0, 1, S_ZERO);</Line>
				<Line Number="44" Count="2">    game_set_square(g2, 0, 2, S_ONE);</Line>
				<Line Number="45" Count="2">    game_set_square(g2, 0, 3, S_ONE);</Line>
				<Line Number="46" Count="2">    game_set_square(g2, 3, 0, S_ZERO);</Line>
				<Line Number="47" Count="2">    game_set_square(g2, 3, 1, S_ZERO);</Line>
				<Line Number="48" Count="2">    game_set_square(g2, 3, 2, S_ONE);</Line>
				<Line Number="49" Count="2">    game_set_square(g2, 3, 3, S_ONE);</Line>
				<Line Number="50" Count="2">    game g2_copy = game_copy(g2);</Line>
				<Line Number="51" Count="-1"></Line>
				<Line Number="52" Count="2">    if (g1 == NULL || g1_copy == NULL || g2 == NULL)</Line>
				<Line Number="53" Count="0">        return false;</Line>
				<Line Number="54" Count="2">    if (!game_equal(g1, g1_copy)) {</Line>
				<Line Number="55" Count="0">        game_delete(g1);</Line>
				<Line Number="56" Count="0">        game_delete(g1_copy);</Line>
				<Line Number="57" Count="0">        game_delete(g2);</Line>
				<Line Number="58" Count="0">        game_delete(g2_copy);</Line>
				<Line Number="59" Count="0">        return false;</Line>
				<Line Number="60" Count="-1">    }</Line>
				<Line Number="61" Count="2">    game_set_square(g1, 0, 0, 1);</Line>
				<Line Number="62" Count="2">    if (game_equal(g1, g1_copy)) {</Line>
				<Line Number="63" Count="0">        game_delete(g1);</Line>
				<Line Number="64" Count="0">        game_delete(g1_copy);</Line>
				<Line Number="65" Count="0">        game_delete(g2);</Line>
				<Line Number="66" Count="0">        game_delete(g2_copy);</Line>
				<Line Number="67" Count="0">        return false;</Line>
				<Line Number="68" Count="-1">    }</Line>
				<Line Number="69" Count="2">    if (!game_equal(g2, g2_copy)) {</Line>
				<Line Number="70" Count="0">        game_delete(g1);</Line>
				<Line Number="71" Count="0">        game_delete(g1_copy);</Line>
				<Line Number="72" Count="0">        game_delete(g2);</Line>
				<Line Number="73" Count="0">        game_delete(g2_copy);</Line>
				<Line Number="74" Count="0">        return false;</Line>
				<Line Number="75" Count="-1">    }</Line>
				<Line Number="76" Count="2">    if (game_nb_cols(g2) != game_nb_cols(g2_copy) || game_nb_rows(g2) != game_nb_rows(g2_copy)) {</Line>
				<Line Number="77" Count="0">        game_delete(g1);</Line>
				<Line Number="78" Count="0">        game_delete(g1_copy);</Line>
				<Line Number="79" Count="0">        game_delete(g2);</Line>
				<Line Number="80" Count="0">        game_delete(g2_copy);</Line>
				<Line Number="81" Count="0">        return (false);</Line>
				<Line Number="82" Count="-1">    }</Line>
				<Line Number="83" Count="2">    if (game_is_wrapping(g2) != game_is_wrapping(g2_copy) || game_is_unique(g2) != game_is_unique(g2_copy)) {</Line>
				<Line Number="84" Count="0">        game_delete(g1);</Line>
				<Line Number="85" Count="0">        game_delete(g1_copy);</Line>
				<Line Number="86" Count="0">        game_delete(g2);</Line>
				<Line Number="87" Count="0">        game_delete(g2_copy);</Line>
				<Line Number="88" Count="0">        return false;</Line>
				<Line Number="89" Count="-1">    }</Line>
				<Line Number="90" Count="2">    game_delete(g1);</Line>
				<Line Number="91" Count="2">    game_delete(g1_copy);</Line>
				<Line Number="92" Count="2">    game_delete(g2);</Line>
				<Line Number="93" Count="2">    game_delete(g2_copy);</Line>
				<Line Number="94" Count="2">    return true;</Line>
				<Line Number="95" Count="-1">}</Line>
				<Line Number="96" Count="-1"></Line>
				<Line Number="97" Count="2">bool test_game_equal(void) {</Line>
				<Line Number="98" Count="2">    square squares_1[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 3, 0, 2, 3, 0,</Line>
				<Line Number="99" Count="-1">                                                     0, 3, 4, 0, 1, 0, 0, 1, 4, 0, 2, 3, 0, 0, 0, 2, 0, 3};</Line>
				<Line Number="100" Count="2">    game g1 = game_new(squares_1);</Line>
				<Line Number="101" Count="2">    square squares_2[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 2, 3, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 3, 0, 2, 1, 0,</Line>
				<Line Number="102" Count="-1">                                                     0, 3, 4, 0, 1, 0, 0, 1, 4, 0, 2, 3, 0, 0, 0, 2, 0, 3};</Line>
				<Line Number="103" Count="2">    game g2 = game_new(squares_2);</Line>
				<Line Number="104" Count="-1"></Line>
				<Line Number="105" Count="2">    if (g1 == NULL || g2 == NULL)</Line>
				<Line Number="106" Count="0">        return false;</Line>
				<Line Number="107" Count="2">    if (game_equal(g1, g2)) {</Line>
				<Line Number="108" Count="0">        game_delete(g1);</Line>
				<Line Number="109" Count="0">        game_delete(g2);</Line>
				<Line Number="110" Count="0">        return false;</Line>
				<Line Number="111" Count="-1">    }</Line>
				<Line Number="112" Count="2">    game_delete(g1);</Line>
				<Line Number="113" Count="2">    game_delete(g2);</Line>
				<Line Number="114" Count="2">    return true;</Line>
				<Line Number="115" Count="-1">}</Line>
				<Line Number="116" Count="-1"></Line>
				<Line Number="117" Count="2">bool test_game_delete(void) { return true; }</Line>
				<Line Number="118" Count="-1"></Line>
				<Line Number="119" Count="2">bool test_game_is_empty(void) {</Line>
				<Line Number="120" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 3, 0, 0, 3, 0,</Line>
				<Line Number="121" Count="-1">                                                   0, 3, 4, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 1, 0, 0, 0, 3};</Line>
				<Line Number="122" Count="2">    game g = game_new(squares);</Line>
				<Line Number="123" Count="-1"></Line>
				<Line Number="124" Count="2">    if (!g)</Line>
				<Line Number="125" Count="0">        return false;</Line>
				<Line Number="126" Count="-1"></Line>
				<Line Number="127" Count="14">    for (uint j = 0; j &lt; DEFAULT_SIZE; j++) {</Line>
				<Line Number="128" Count="84">        for (uint i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="129" Count="72">            if (game_get_square(g, i, j) == 0 &amp;&amp; !game_is_empty(g, i, j)) {</Line>
				<Line Number="130" Count="0">                game_delete(g);</Line>
				<Line Number="131" Count="0">                return false;</Line>
				<Line Number="132" Count="-1">            }</Line>
				<Line Number="133" Count="72">            if (game_get_square(g, i, j) == 1 &amp;&amp; game_is_empty(g, i, j)) {</Line>
				<Line Number="134" Count="0">                game_delete(g);</Line>
				<Line Number="135" Count="0">                return false;</Line>
				<Line Number="136" Count="-1">            }</Line>
				<Line Number="137" Count="-1">        }</Line>
				<Line Number="138" Count="-1">    }</Line>
				<Line Number="139" Count="2">    game_delete(g);</Line>
				<Line Number="140" Count="2">    return true;</Line>
				<Line Number="141" Count="-1">}</Line>
				<Line Number="142" Count="-1"></Line>
				<Line Number="143" Count="2">bool test_game_restart(void) {</Line>
				<Line Number="144" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,</Line>
				<Line Number="145" Count="-1">                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};</Line>
				<Line Number="146" Count="2">    game g = game_new(squares);</Line>
				<Line Number="147" Count="-1"></Line>
				<Line Number="148" Count="2">    if (!g)</Line>
				<Line Number="149" Count="0">        return false;</Line>
				<Line Number="150" Count="-1"></Line>
				<Line Number="151" Count="2">    game_set_square(g, 0, 0, S_ZERO);</Line>
				<Line Number="152" Count="2">    game_set_square(g, 3, 5, S_ONE);</Line>
				<Line Number="153" Count="2">    game_restart(g);</Line>
				<Line Number="154" Count="-1"></Line>
				<Line Number="155" Count="14">    for (uint i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="156" Count="84">        for (uint j = 0; j &lt; DEFAULT_SIZE; j++) {</Line>
				<Line Number="157" Count="72">            if (game_get_square(g, i, j) != squares[DEFAULT_SIZE * i + j]) {</Line>
				<Line Number="158" Count="0">                game_delete(g);</Line>
				<Line Number="159" Count="0">                return false;</Line>
				<Line Number="160" Count="-1">            }</Line>
				<Line Number="161" Count="-1">        }</Line>
				<Line Number="162" Count="-1">    }</Line>
				<Line Number="163" Count="2">    game_delete(g);</Line>
				<Line Number="164" Count="-1"></Line>
				<Line Number="165" Count="2">    return true;</Line>
				<Line Number="166" Count="-1">}</Line>
				<Line Number="167" Count="-1"></Line>
				<Line Number="168" Count="2">bool test_game_set_square() {</Line>
				<Line Number="169" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,</Line>
				<Line Number="170" Count="-1">                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};</Line>
				<Line Number="171" Count="2">    game g = game_new(squares);</Line>
				<Line Number="172" Count="-1"></Line>
				<Line Number="173" Count="2">    if (!g)</Line>
				<Line Number="174" Count="0">        return (false);</Line>
				<Line Number="175" Count="2">    game_set_square(g, 0, 0, S_ZERO);</Line>
				<Line Number="176" Count="2">    squares[DEFAULT_SIZE * 0 + 0] = S_ZERO;</Line>
				<Line Number="177" Count="2">    game_set_square(g, 1, 0, S_ONE);</Line>
				<Line Number="178" Count="2">    squares[DEFAULT_SIZE * 1 + 0] = S_ONE;</Line>
				<Line Number="179" Count="2">    game_set_square(g, 0, 3, S_IMMUTABLE_ZERO);</Line>
				<Line Number="180" Count="2">    squares[DEFAULT_SIZE * 0 + 3] = S_IMMUTABLE_ZERO;</Line>
				<Line Number="181" Count="2">    game_set_square(g, 1, 5, S_IMMUTABLE_ONE);</Line>
				<Line Number="182" Count="2">    squares[DEFAULT_SIZE * 1 + 5] = S_IMMUTABLE_ONE;</Line>
				<Line Number="183" Count="2">    game_set_square(g, 0, 1, S_EMPTY);</Line>
				<Line Number="184" Count="2">    squares[DEFAULT_SIZE * 0 + 1] = S_EMPTY;</Line>
				<Line Number="185" Count="14">    for (int i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="186" Count="84">        for (int j = 0; j &lt; DEFAULT_SIZE; j++) {</Line>
				<Line Number="187" Count="72">            if (game_get_square(g, i, j) != squares[DEFAULT_SIZE * i + j])</Line>
				<Line Number="188" Count="0">                return (false);</Line>
				<Line Number="189" Count="-1">        }</Line>
				<Line Number="190" Count="-1">    }</Line>
				<Line Number="191" Count="2">    game_delete(g);</Line>
				<Line Number="192" Count="2">    return (true);</Line>
				<Line Number="193" Count="-1">}</Line>
				<Line Number="194" Count="-1"></Line>
				<Line Number="195" Count="2">bool test_game_get_square() {</Line>
				<Line Number="196" Count="2">    game g = game_default();</Line>
				<Line Number="197" Count="2">    bool status = true;</Line>
				<Line Number="198" Count="-1"></Line>
				<Line Number="199" Count="2">    if (!g)</Line>
				<Line Number="200" Count="0">        return (false);</Line>
				<Line Number="201" Count="2">    game_set_square(g, 0, 0, S_ZERO);</Line>
				<Line Number="202" Count="2">    game_set_square(g, 1, 0, S_ONE);</Line>
				<Line Number="203" Count="2">    game_set_square(g, 0, 3, S_IMMUTABLE_ZERO);</Line>
				<Line Number="204" Count="2">    game_set_square(g, 1, 5, S_IMMUTABLE_ONE);</Line>
				<Line Number="205" Count="2">    game_set_square(g, 0, 1, S_EMPTY);</Line>
				<Line Number="206" Count="2">    if (game_get_square(g, 0, 0) != S_ZERO)</Line>
				<Line Number="207" Count="0">        status = false;</Line>
				<Line Number="208" Count="2">    else if (game_get_square(g, 1, 0) != S_ONE)</Line>
				<Line Number="209" Count="0">        status = false;</Line>
				<Line Number="210" Count="2">    else if (game_get_square(g, 0, 3) != S_IMMUTABLE_ZERO)</Line>
				<Line Number="211" Count="0">        status = false;</Line>
				<Line Number="212" Count="2">    else if (game_get_square(g, 1, 5) != S_IMMUTABLE_ONE)</Line>
				<Line Number="213" Count="0">        status = false;</Line>
				<Line Number="214" Count="2">    else if (game_get_square(g, 0, 1) != S_EMPTY)</Line>
				<Line Number="215" Count="0">        status = false;</Line>
				<Line Number="216" Count="2">    game_delete(g);</Line>
				<Line Number="217" Count="2">    return (status);</Line>
				<Line Number="218" Count="-1">}</Line>
				<Line Number="219" Count="-1"></Line>
				<Line Number="220" Count="2">bool test_game_get_number() {</Line>
				<Line Number="221" Count="2">    game g = game_default();</Line>
				<Line Number="222" Count="2">    bool status = true;</Line>
				<Line Number="223" Count="-1"></Line>
				<Line Number="224" Count="2">    if (!g)</Line>
				<Line Number="225" Count="0">        return (false);</Line>
				<Line Number="226" Count="2">    game_set_square(g, 0, 3, S_ONE);</Line>
				<Line Number="227" Count="2">    game_set_square(g, 0, 4, S_ZERO);</Line>
				<Line Number="228" Count="2">    if (game_get_number(g, 0, 1) != 1)</Line>
				<Line Number="229" Count="0">        status = false;</Line>
				<Line Number="230" Count="2">    else if (game_get_number(g, 0, 0) != -1)</Line>
				<Line Number="231" Count="0">        status = false;</Line>
				<Line Number="232" Count="2">    else if (game_get_number(g, 2, 1) != 0)</Line>
				<Line Number="233" Count="0">        status = false;</Line>
				<Line Number="234" Count="2">    else if (game_get_number(g, 0, 3) != 1)</Line>
				<Line Number="235" Count="0">        status = false;</Line>
				<Line Number="236" Count="2">    else if (game_get_number(g, 0, 4) != 0)</Line>
				<Line Number="237" Count="0">        status = false;</Line>
				<Line Number="238" Count="2">    game_delete(g);</Line>
				<Line Number="239" Count="2">    return (status);</Line>
				<Line Number="240" Count="-1">}</Line>
				<Line Number="241" Count="-1"></Line>
				<Line Number="242" Count="2">bool test_game_get_next_square() {</Line>
				<Line Number="243" Count="2">    game g = game_default();</Line>
				<Line Number="244" Count="2">    game g2 = game_new_empty_ext(12, 12, true, false);</Line>
				<Line Number="245" Count="2">    bool status = true;</Line>
				<Line Number="246" Count="-1"></Line>
				<Line Number="247" Count="2">    if (!g)</Line>
				<Line Number="248" Count="0">        return (false);</Line>
				<Line Number="249" Count="2">    if (!g2)</Line>
				<Line Number="250" Count="0">        return (false);</Line>
				<Line Number="251" Count="2">    game_set_square(g, 0, 3, S_ZERO);</Line>
				<Line Number="252" Count="2">    game_set_square(g, 0, 4, S_ONE);</Line>
				<Line Number="253" Count="2">    game_set_square(g2, 0, 1, S_ONE);</Line>
				<Line Number="254" Count="2">    game_set_square(g2, 0, 2, S_ONE);</Line>
				<Line Number="255" Count="2">    game_set_square(g2, 0, 10, S_ZERO);</Line>
				<Line Number="256" Count="2">    game_set_square(g2, 0, 5, S_ZERO);</Line>
				<Line Number="257" Count="2">    game_set_square(g2, 10, 0, S_ZERO);</Line>
				<Line Number="258" Count="2">    game_set_square(g2, 5, 0, S_ZERO);</Line>
				<Line Number="259" Count="2">    game_set_square(g2, 0, 11, S_ZERO);</Line>
				<Line Number="260" Count="2">    if (game_get_next_square(g, 0, 0, RIGHT, 1) != S_IMMUTABLE_ONE)</Line>
				<Line Number="261" Count="0">        status = false;</Line>
				<Line Number="262" Count="2">    else if (game_get_next_square(g, 0, 0, RIGHT, 2) != S_IMMUTABLE_ZERO)</Line>
				<Line Number="263" Count="0">        status = false;</Line>
				<Line Number="264" Count="2">    else if (game_get_next_square(g, 0, 0, DOWN, 1) != S_EMPTY)</Line>
				<Line Number="265" Count="0">        status = false;</Line>
				<Line Number="266" Count="2">    else if (game_get_next_square(g, 3, 0, LEFT, 2) != -1)</Line>
				<Line Number="267" Count="0">        status = false;</Line>
				<Line Number="268" Count="2">    else if (game_get_next_square(g, 2, 1, UP, 2) != S_IMMUTABLE_ONE)</Line>
				<Line Number="269" Count="0">        status = false;</Line>
				<Line Number="270" Count="2">    else if (game_get_next_square(g, 0, 1, RIGHT, 2) != S_ZERO)</Line>
				<Line Number="271" Count="0">        status = false;</Line>
				<Line Number="272" Count="2">    else if (game_get_next_square(g, 0, 5, LEFT, 1) != S_ONE)</Line>
				<Line Number="273" Count="0">        status = false;</Line>
				<Line Number="274" Count="2">    else if (game_get_next_square(g2, 0, 11, RIGHT, 2) != S_ONE)</Line>
				<Line Number="275" Count="0">        status = false;</Line>
				<Line Number="276" Count="2">    else if (game_get_next_square(g2, 11, 2, DOWN, 1) != S_ONE)</Line>
				<Line Number="277" Count="0">        status = false;</Line>
				<Line Number="278" Count="2">    else if (game_get_next_square(g2, 0, 0, UP, 2) != S_ZERO)</Line>
				<Line Number="279" Count="0">        status = false;</Line>
				<Line Number="280" Count="2">    else if (game_get_next_square(g2, 0, 0, LEFT, 2) != S_ZERO)</Line>
				<Line Number="281" Count="0">        status = false;</Line>
				<Line Number="282" Count="2">    else if (game_get_next_square(g2, 0, 6, LEFT, 1) != S_ZERO)</Line>
				<Line Number="283" Count="0">        status = false;</Line>
				<Line Number="284" Count="2">    else if (game_get_next_square(g2, 6, 0, UP, 1) != S_ZERO)</Line>
				<Line Number="285" Count="0">        status = false;</Line>
				<Line Number="286" Count="2">    else if (game_get_next_square(g2, 0, 1, LEFT, 2) != S_ZERO)</Line>
				<Line Number="287" Count="0">        status = false;</Line>
				<Line Number="288" Count="2">    game_delete(g);</Line>
				<Line Number="289" Count="2">    game_delete(g2);</Line>
				<Line Number="290" Count="2">    return (status);</Line>
				<Line Number="291" Count="-1">}</Line>
				<Line Number="292" Count="-1"></Line>
				<Line Number="293" Count="2">bool test_game_get_next_number() {</Line>
				<Line Number="294" Count="2">    game g = game_default();</Line>
				<Line Number="295" Count="2">    game g2 = game_new_empty_ext(12, 12, true, false);</Line>
				<Line Number="296" Count="2">    bool status = true;</Line>
				<Line Number="297" Count="-1"></Line>
				<Line Number="298" Count="2">    if (!g)</Line>
				<Line Number="299" Count="0">        return (false);</Line>
				<Line Number="300" Count="2">    if (!g2)</Line>
				<Line Number="301" Count="0">        return (false);</Line>
				<Line Number="302" Count="2">    game_set_square(g, 0, 3, S_ZERO);</Line>
				<Line Number="303" Count="2">    game_set_square(g, 0, 4, S_ONE);</Line>
				<Line Number="304" Count="2">    game_set_square(g2, 0, 1, S_ONE);</Line>
				<Line Number="305" Count="2">    game_set_square(g2, 0, 2, S_ONE);</Line>
				<Line Number="306" Count="2">    game_set_square(g2, 0, 10, S_ZERO);</Line>
				<Line Number="307" Count="2">    game_set_square(g2, 0, 5, S_ZERO);</Line>
				<Line Number="308" Count="2">    game_set_square(g2, 10, 0, S_ZERO);</Line>
				<Line Number="309" Count="2">    game_set_square(g2, 5, 0, S_ZERO);</Line>
				<Line Number="310" Count="2">    game_set_square(g2, 0, 11, S_ZERO);</Line>
				<Line Number="311" Count="-1"></Line>
				<Line Number="312" Count="2">    if (game_get_next_number(g, 0, 0, RIGHT, 1) != 1)</Line>
				<Line Number="313" Count="0">        status = false;</Line>
				<Line Number="314" Count="2">    else if (game_get_next_number(g, 0, 0, RIGHT, 2) != 0)</Line>
				<Line Number="315" Count="0">        status = false;</Line>
				<Line Number="316" Count="2">    else if (game_get_next_number(g, 0, 0, DOWN, 1) != -1)</Line>
				<Line Number="317" Count="0">        status = false;</Line>
				<Line Number="318" Count="2">    else if (game_get_next_number(g, 3, 0, LEFT, 2) != -1)</Line>
				<Line Number="319" Count="0">        status = false;</Line>
				<Line Number="320" Count="2">    else if (game_get_next_number(g, 2, 1, UP, 2) != 1)</Line>
				<Line Number="321" Count="0">        status = false;</Line>
				<Line Number="322" Count="2">    else if (game_get_next_number(g, 0, 1, RIGHT, 2) != 0)</Line>
				<Line Number="323" Count="0">        status = false;</Line>
				<Line Number="324" Count="2">    else if (game_get_next_number(g, 0, 5, LEFT, 1) != 1)</Line>
				<Line Number="325" Count="0">        status = false;</Line>
				<Line Number="326" Count="2">    else if (game_get_next_number(g2, 0, 11, RIGHT, 2) != 1)</Line>
				<Line Number="327" Count="0">        status = false;</Line>
				<Line Number="328" Count="2">    else if (game_get_next_number(g2, 11, 2, DOWN, 1) != 1)</Line>
				<Line Number="329" Count="0">        status = false;</Line>
				<Line Number="330" Count="2">    else if (game_get_next_number(g2, 0, 0, UP, 2) != 0)</Line>
				<Line Number="331" Count="0">        status = false;</Line>
				<Line Number="332" Count="2">    else if (game_get_next_number(g2, 0, 0, LEFT, 2) != 0)</Line>
				<Line Number="333" Count="0">        status = false;</Line>
				<Line Number="334" Count="2">    else if (game_get_next_number(g2, 0, 6, LEFT, 1) != 0)</Line>
				<Line Number="335" Count="0">        status = false;</Line>
				<Line Number="336" Count="2">    else if (game_get_next_number(g2, 6, 0, UP, 1) != 0)</Line>
				<Line Number="337" Count="0">        status = false;</Line>
				<Line Number="338" Count="2">    else if (game_get_next_number(g2, 0, 1, LEFT, 2) != 0)</Line>
				<Line Number="339" Count="0">        status = false;</Line>
				<Line Number="340" Count="2">    game_delete(g);</Line>
				<Line Number="341" Count="2">    game_delete(g2);</Line>
				<Line Number="342" Count="2">    return (status);</Line>
				<Line Number="343" Count="-1">}</Line>
				<Line Number="344" Count="-1"></Line>
				<Line Number="345" Count="2">bool test_game_is_immutable() {</Line>
				<Line Number="346" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,</Line>
				<Line Number="347" Count="-1">                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};</Line>
				<Line Number="348" Count="2">    game g = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);</Line>
				<Line Number="349" Count="-1"></Line>
				<Line Number="350" Count="2">    if (!g)</Line>
				<Line Number="351" Count="0">        return false;</Line>
				<Line Number="352" Count="14">    for (uint i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="353" Count="84">        for (uint j = 0; j &lt; DEFAULT_SIZE; j++) {</Line>
				<Line Number="354" Count="90">            if (game_is_immutable(g, i, j) &amp;&amp;</Line>
				<Line Number="355" Count="30">                (game_get_square(g, i, j) != S_IMMUTABLE_ONE &amp;&amp; game_get_square(g, i, j) != S_IMMUTABLE_ZERO)) {</Line>
				<Line Number="356" Count="0">                game_delete(g);</Line>
				<Line Number="357" Count="0">                return false;</Line>
				<Line Number="358" Count="126">            } else if (!(game_is_immutable(g, i, j)) &amp;&amp;</Line>
				<Line Number="359" Count="108">                       (game_get_square(g, i, j) == S_IMMUTABLE_ONE || game_get_square(g, i, j) == S_IMMUTABLE_ZERO)) {</Line>
				<Line Number="360" Count="0">                game_delete(g);</Line>
				<Line Number="361" Count="0">                return false;</Line>
				<Line Number="362" Count="-1">            }</Line>
				<Line Number="363" Count="-1">        }</Line>
				<Line Number="364" Count="-1">    }</Line>
				<Line Number="365" Count="2">    game_delete(g);</Line>
				<Line Number="366" Count="2">    return true;</Line>
				<Line Number="367" Count="-1">}</Line>
				<Line Number="368" Count="-1"></Line>
				<Line Number="369" Count="2">bool test_game_has_error() {</Line>
				<Line Number="370" Count="2">    game g1 = game_default_solution();</Line>
				<Line Number="371" Count="2">    square squares_2[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2,</Line>
				<Line Number="372" Count="-1">                                                     4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3};</Line>
				<Line Number="373" Count="2">    game g2 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_2, false, false);</Line>
				<Line Number="374" Count="2">    if (!g1 || !g2)</Line>
				<Line Number="375" Count="0">        return false;</Line>
				<Line Number="376" Count="-1"></Line>
				<Line Number="377" Count="14">    for (uint i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="378" Count="84">        for (uint j = 0; j &lt; DEFAULT_SIZE; j++) {</Line>
				<Line Number="379" Count="72">            if (game_has_error(g1, i, j) || !game_has_error(g2, i, j)) {</Line>
				<Line Number="380" Count="0">                game_delete(g1);</Line>
				<Line Number="381" Count="0">                game_delete(g2);</Line>
				<Line Number="382" Count="0">                return false;</Line>
				<Line Number="383" Count="-1">            }</Line>
				<Line Number="384" Count="-1">        }</Line>
				<Line Number="385" Count="-1">    }</Line>
				<Line Number="386" Count="2">    game_delete(g1);</Line>
				<Line Number="387" Count="2">    game_delete(g2);</Line>
				<Line Number="388" Count="-1"></Line>
				<Line Number="389" Count="2">    square squares_4[DEFAULT_SIZE * DEFAULT_SIZE] = {2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2,</Line>
				<Line Number="390" Count="-1">                                                     2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2};</Line>
				<Line Number="391" Count="2">    game g4 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_4, false, true);</Line>
				<Line Number="392" Count="14">    for (uint i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="393" Count="84">        for (uint j = 0; j &lt; DEFAULT_SIZE; j++) {</Line>
				<Line Number="394" Count="72">            if (!game_has_error(g4, i, j)) {</Line>
				<Line Number="395" Count="0">                game_delete(g4);</Line>
				<Line Number="396" Count="0">                return false;</Line>
				<Line Number="397" Count="-1">            }</Line>
				<Line Number="398" Count="-1">        }</Line>
				<Line Number="399" Count="-1">    }</Line>
				<Line Number="400" Count="2">    game_delete(g4);</Line>
				<Line Number="401" Count="2">    return true;</Line>
				<Line Number="402" Count="-1">}</Line>
				<Line Number="403" Count="-1"></Line>
				<Line Number="404" Count="2">bool test_game_check_move() {</Line>
				<Line Number="405" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,</Line>
				<Line Number="406" Count="-1">                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};</Line>
				<Line Number="407" Count="2">    game g = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);</Line>
				<Line Number="408" Count="2">    if (!g)</Line>
				<Line Number="409" Count="0">        return false;</Line>
				<Line Number="410" Count="2">    if (game_check_move(g, 0, 0, S_IMMUTABLE_ZERO))</Line>
				<Line Number="411" Count="0">        return false;</Line>
				<Line Number="412" Count="14">    for (uint i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="413" Count="84">        for (uint j = 0; j &lt; DEFAULT_SIZE; j++) {</Line>
				<Line Number="414" Count="126">            if (game_check_move(g, i, j, S_EMPTY) &amp;&amp;</Line>
				<Line Number="415" Count="108">                (game_get_square(g, i, j) == S_IMMUTABLE_ONE || game_get_square(g, i, j) == S_IMMUTABLE_ZERO)) {</Line>
				<Line Number="416" Count="0">                game_delete(g);</Line>
				<Line Number="417" Count="0">                return false;</Line>
				<Line Number="418" Count="90">            } else if (!(game_check_move(g, i, j, S_EMPTY)) &amp;&amp;</Line>
				<Line Number="419" Count="30">                       (game_get_square(g, i, j) != S_IMMUTABLE_ONE &amp;&amp; game_get_square(g, i, j) != S_IMMUTABLE_ZERO)) {</Line>
				<Line Number="420" Count="0">                game_delete(g);</Line>
				<Line Number="421" Count="0">                return false;</Line>
				<Line Number="422" Count="-1">            }</Line>
				<Line Number="423" Count="-1">        }</Line>
				<Line Number="424" Count="-1">    }</Line>
				<Line Number="425" Count="2">    game_delete(g);</Line>
				<Line Number="426" Count="2">    return true;</Line>
				<Line Number="427" Count="-1">}</Line>
				<Line Number="428" Count="-1"></Line>
				<Line Number="429" Count="2">bool test_game_play_move() {</Line>
				<Line Number="430" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,</Line>
				<Line Number="431" Count="-1">                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};</Line>
				<Line Number="432" Count="2">    game g = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);</Line>
				<Line Number="433" Count="-1">    // game g2 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);</Line>
				<Line Number="434" Count="-1"></Line>
				<Line Number="435" Count="2">    if (!g)</Line>
				<Line Number="436" Count="0">        return (false);</Line>
				<Line Number="437" Count="-1">    square q;</Line>
				<Line Number="438" Count="14">    for (uint i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="439" Count="44">        for (uint j = 0; j &lt; DEFAULT_SIZE; j++) {</Line>
				<Line Number="440" Count="42">            q = game_get_square(g, i, j);</Line>
				<Line Number="441" Count="42">            if (q == S_IMMUTABLE_ONE || q == S_IMMUTABLE_ZERO) {</Line>
				<Line Number="442" Count="-1">                break;</Line>
				<Line Number="443" Count="-1">            } else {</Line>
				<Line Number="444" Count="32">                game_play_move(g, i, j, S_ONE);</Line>
				<Line Number="445" Count="-1">            }</Line>
				<Line Number="446" Count="32">            if ((q == S_IMMUTABLE_ONE || q == S_IMMUTABLE_ZERO) &amp;&amp; q != game_get_square(g, i, j)) {</Line>
				<Line Number="447" Count="0">                game_delete(g);</Line>
				<Line Number="448" Count="0">                return false;</Line>
				<Line Number="449" Count="-1">            }</Line>
				<Line Number="450" Count="32">            if ((q != S_IMMUTABLE_ONE &amp;&amp; q != S_IMMUTABLE_ZERO) &amp;&amp; q == game_get_square(g, i, j)) {</Line>
				<Line Number="451" Count="0">                game_delete(g);</Line>
				<Line Number="452" Count="0">                return false;</Line>
				<Line Number="453" Count="-1">            }</Line>
				<Line Number="454" Count="-1">        }</Line>
				<Line Number="455" Count="-1">    }</Line>
				<Line Number="456" Count="2">    game_delete(g);</Line>
				<Line Number="457" Count="2">    return true;</Line>
				<Line Number="458" Count="-1">}</Line>
				<Line Number="459" Count="-1"></Line>
				<Line Number="460" Count="2">bool test_game_is_over() {</Line>
				<Line Number="461" Count="2">    game g1 = game_default_solution();</Line>
				<Line Number="462" Count="2">    square squares_2[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 1, 2, 2, 3, 3, 4, 4, 1, 1, 2, 2, 3, 3, 4, 4, 1, 1,</Line>
				<Line Number="463" Count="-1">                                                     2, 2, 3, 3, 4, 4, 1, 1, 2, 2, 3, 3, 4, 4, 1, 1, 2, 2};</Line>
				<Line Number="464" Count="2">    game g2 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_2, false, false);</Line>
				<Line Number="465" Count="2">    square squares_3[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2,</Line>
				<Line Number="466" Count="-1">                                                     4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3};</Line>
				<Line Number="467" Count="2">    game g3 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_3, false, false);</Line>
				<Line Number="468" Count="2">    square squares_4[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4, 1, 2, 3,</Line>
				<Line Number="469" Count="-1">                                                     4, 1, 2, 3, 4, 1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2};</Line>
				<Line Number="470" Count="2">    game g4 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_4, false, false);</Line>
				<Line Number="471" Count="2">    square squares_5[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1,</Line>
				<Line Number="472" Count="-1">                                                     1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0};</Line>
				<Line Number="473" Count="2">    game g5 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_5, false, false);</Line>
				<Line Number="474" Count="-1"></Line>
				<Line Number="475" Count="2">    if (!g1 || !g2 || !g3 || !g4 || !g5)</Line>
				<Line Number="476" Count="0">        return false;</Line>
				<Line Number="477" Count="-1"></Line>
				<Line Number="478" Count="2">    if (!game_is_over(g1) || game_is_over(g2) || game_is_over(g3) || game_is_over(g4) || game_is_over(g5)) {</Line>
				<Line Number="479" Count="0">        game_delete(g1);</Line>
				<Line Number="480" Count="0">        game_delete(g2);</Line>
				<Line Number="481" Count="0">        game_delete(g3);</Line>
				<Line Number="482" Count="0">        game_delete(g4);</Line>
				<Line Number="483" Count="0">        game_delete(g5);</Line>
				<Line Number="484" Count="0">        return false;</Line>
				<Line Number="485" Count="-1">    }</Line>
				<Line Number="486" Count="2">    game_delete(g1);</Line>
				<Line Number="487" Count="2">    game_delete(g2);</Line>
				<Line Number="488" Count="2">    game_delete(g3);</Line>
				<Line Number="489" Count="2">    game_delete(g4);</Line>
				<Line Number="490" Count="2">    game_delete(g5);</Line>
				<Line Number="491" Count="2">    return true;</Line>
				<Line Number="492" Count="-1">}</Line>
				<Line Number="493" Count="-1"></Line>
				<Line Number="494" Count="-1">/*  USAGE  */</Line>
				<Line Number="495" Count="0">void usage(char *argv[]) {</Line>
				<Line Number="496" Count="0">    fprintf(stderr, "Usage: %s &lt;testname&gt; [&lt;...&gt;]\n", argv[0]);</Line>
				<Line Number="497" Count="0">    exit(EXIT_FAILURE);</Line>
				<Line Number="498" Count="-1">}</Line>
				<Line Number="499" Count="-1"></Line>
				<Line Number="500" Count="-1">/*  MAIN ROUTINE  */</Line>
				<Line Number="501" Count="34">int main(int argc, char *argv[]) {</Line>
				<Line Number="502" Count="34">    if (argc == 1)</Line>
				<Line Number="503" Count="0">        usage(argv);</Line>
				<Line Number="504" Count="-1"></Line>
				<Line Number="505" Count="34">    fprintf(stderr, "=&gt; Start test \"%s\"\n", argv[1]);</Line>
				<Line Number="506" Count="34">    bool pass = false;</Line>
				<Line Number="507" Count="34">    if (strcmp("game_new", argv[1]) == 0)</Line>
				<Line Number="508" Count="2">        pass = test_game_new();</Line>
				<Line Number="509" Count="32">    else if (strcmp("game_new_empty", argv[1]) == 0)</Line>
				<Line Number="510" Count="2">        pass = test_game_new_empty();</Line>
				<Line Number="511" Count="30">    else if (strcmp("game_copy", argv[1]) == 0)</Line>
				<Line Number="512" Count="2">        pass = test_game_copy();</Line>
				<Line Number="513" Count="28">    else if (strcmp("game_equal", argv[1]) == 0)</Line>
				<Line Number="514" Count="2">        pass = test_game_equal();</Line>
				<Line Number="515" Count="26">    else if (strcmp("game_delete", argv[1]) == 0)</Line>
				<Line Number="516" Count="2">        pass = test_game_delete();</Line>
				<Line Number="517" Count="24">    else if (strcmp("game_is_empty", argv[1]) == 0)</Line>
				<Line Number="518" Count="2">        pass = test_game_is_empty();</Line>
				<Line Number="519" Count="22">    else if (strcmp("game_restart", argv[1]) == 0)</Line>
				<Line Number="520" Count="2">        pass = test_game_restart();</Line>
				<Line Number="521" Count="20">    else if (strcmp("game_set_square", argv[1]) == 0)</Line>
				<Line Number="522" Count="2">        pass = test_game_set_square();</Line>
				<Line Number="523" Count="18">    else if (strcmp("game_get_square", argv[1]) == 0)</Line>
				<Line Number="524" Count="2">        pass = test_game_get_square();</Line>
				<Line Number="525" Count="16">    else if (strcmp("game_get_number", argv[1]) == 0)</Line>
				<Line Number="526" Count="2">        pass = test_game_get_number();</Line>
				<Line Number="527" Count="14">    else if (strcmp("game_get_next_square", argv[1]) == 0)</Line>
				<Line Number="528" Count="2">        pass = test_game_get_next_square();</Line>
				<Line Number="529" Count="12">    else if (strcmp("game_get_next_number", argv[1]) == 0)</Line>
				<Line Number="530" Count="2">        pass = test_game_get_next_number();</Line>
				<Line Number="531" Count="10">    else if (strcmp("game_is_immutable", argv[1]) == 0)</Line>
				<Line Number="532" Count="2">        pass = test_game_is_immutable();</Line>
				<Line Number="533" Count="8">    else if (strcmp("game_has_error", argv[1]) == 0)</Line>
				<Line Number="534" Count="2">        pass = test_game_has_error();</Line>
				<Line Number="535" Count="6">    else if (strcmp("game_check_move", argv[1]) == 0)</Line>
				<Line Number="536" Count="2">        pass = test_game_check_move();</Line>
				<Line Number="537" Count="4">    else if (strcmp("game_play_move", argv[1]) == 0)</Line>
				<Line Number="538" Count="2">        pass = test_game_play_move();</Line>
				<Line Number="539" Count="2">    else if (strcmp("game_is_over", argv[1]) == 0)</Line>
				<Line Number="540" Count="2">        pass = test_game_is_over();</Line>
				<Line Number="541" Count="-1">    else {</Line>
				<Line Number="542" Count="0">        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);</Line>
				<Line Number="543" Count="0">        exit(EXIT_FAILURE);</Line>
				<Line Number="544" Count="-1">    }</Line>
				<Line Number="545" Count="-1"></Line>
				<Line Number="546" Count="34">    if (pass == true) {</Line>
				<Line Number="547" Count="34">        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);</Line>
				<Line Number="548" Count="34">        return EXIT_SUCCESS;</Line>
				<Line Number="549" Count="-1">    } else {</Line>
				<Line Number="550" Count="0">        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);</Line>
				<Line Number="551" Count="0">        return EXIT_FAILURE;</Line>
				<Line Number="552" Count="-1">    }</Line>
				<Line Number="553" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="test_game_aux.c" FullPath="./tests/test_game_aux.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="2">bool test_game_default(void) {</Line>
				<Line Number="3" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,</Line>
				<Line Number="4" Count="-1">                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};</Line>
				<Line Number="5" Count="2">    game g = game_new(squares);</Line>
				<Line Number="6" Count="2">    game g2 = game_default();</Line>
				<Line Number="7" Count="-1"></Line>
				<Line Number="8" Count="2">    if (g == NULL || g2 == NULL)</Line>
				<Line Number="9" Count="0">        return false;</Line>
				<Line Number="10" Count="2">    if (!game_equal(g, g2)) {</Line>
				<Line Number="11" Count="0">        game_delete(g);</Line>
				<Line Number="12" Count="0">        game_delete(g2);</Line>
				<Line Number="13" Count="0">        return false;</Line>
				<Line Number="14" Count="-1">    }</Line>
				<Line Number="15" Count="2">    game_delete(g);</Line>
				<Line Number="16" Count="2">    game_delete(g2);</Line>
				<Line Number="17" Count="2">    return true;</Line>
				<Line Number="18" Count="-1">}</Line>
				<Line Number="19" Count="-1"></Line>
				<Line Number="20" Count="2">bool test_game_default_solution(void) {</Line>
				<Line Number="21" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 4, 3, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2,</Line>
				<Line Number="22" Count="-1">                                                   2, 3, 4, 1, 1, 2, 1, 2, 4, 1, 2, 3, 2, 1, 1, 2, 2, 3};</Line>
				<Line Number="23" Count="2">    game g = game_new(squares);</Line>
				<Line Number="24" Count="2">    game g2 = game_default_solution();</Line>
				<Line Number="25" Count="-1"></Line>
				<Line Number="26" Count="2">    if (g == NULL || g2 == NULL)</Line>
				<Line Number="27" Count="0">        return false;</Line>
				<Line Number="28" Count="2">    if (!game_equal(g, g2)) {</Line>
				<Line Number="29" Count="0">        game_delete(g);</Line>
				<Line Number="30" Count="0">        game_delete(g2);</Line>
				<Line Number="31" Count="0">        return false;</Line>
				<Line Number="32" Count="-1">    }</Line>
				<Line Number="33" Count="2">    game_delete(g);</Line>
				<Line Number="34" Count="2">    game_delete(g2);</Line>
				<Line Number="35" Count="2">    return true;</Line>
				<Line Number="36" Count="-1">}</Line>
				<Line Number="37" Count="-1"></Line>
				<Line Number="38" Count="2">bool test_game_print(void) {</Line>
				<Line Number="39" Count="2">    return true;</Line>
				<Line Number="40" Count="-1">}</Line>
				<Line Number="41" Count="-1"></Line>
				<Line Number="42" Count="-1">/*  USAGE  */</Line>
				<Line Number="43" Count="0">void usage(char *argv[]) {</Line>
				<Line Number="44" Count="0">    fprintf(stderr, "Usage: %s &lt;testname&gt; [&lt;...&gt;]\n", argv[0]);</Line>
				<Line Number="45" Count="0">    exit(EXIT_FAILURE);</Line>
				<Line Number="46" Count="-1">}</Line>
				<Line Number="47" Count="-1"></Line>
				<Line Number="48" Count="-1">/*  MAIN ROUTINE  */</Line>
				<Line Number="49" Count="6">int main(int argc, char *argv[]) {</Line>
				<Line Number="50" Count="6">    if (argc == 1)</Line>
				<Line Number="51" Count="0">        usage(argv);</Line>
				<Line Number="52" Count="-1"></Line>
				<Line Number="53" Count="6">    fprintf(stderr, "=&gt; Start test \"%s\"\n", argv[1]);</Line>
				<Line Number="54" Count="6">    bool pass = false;</Line>
				<Line Number="55" Count="6">    if (strcmp("game_default", argv[1]) == 0)</Line>
				<Line Number="56" Count="2">        pass = test_game_default();</Line>
				<Line Number="57" Count="4">    else if (strcmp("game_default_solution", argv[1]) == 0)</Line>
				<Line Number="58" Count="2">        pass = test_game_default_solution();</Line>
				<Line Number="59" Count="2">    else if (strcmp("game_print", argv[1]) == 0)</Line>
				<Line Number="60" Count="2">        pass = test_game_print();</Line>
				<Line Number="61" Count="-1">    else {</Line>
				<Line Number="62" Count="0">        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);</Line>
				<Line Number="63" Count="0">        exit(EXIT_FAILURE);</Line>
				<Line Number="64" Count="-1">    }</Line>
				<Line Number="65" Count="-1"></Line>
				<Line Number="66" Count="6">    if (pass == true) {</Line>
				<Line Number="67" Count="6">        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);</Line>
				<Line Number="68" Count="6">        return EXIT_SUCCESS;</Line>
				<Line Number="69" Count="-1">    } else {</Line>
				<Line Number="70" Count="0">        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);</Line>
				<Line Number="71" Count="0">        return EXIT_FAILURE;</Line>
				<Line Number="72" Count="-1">    }</Line>
				<Line Number="73" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="test_game_ext.c" FullPath="./tests/test_game_ext.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="2">bool test_game_new_ext(void) {</Line>
				<Line Number="3" Count="2">    bool pass = true;</Line>
				<Line Number="4" Count="2">    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 4, 3, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2,</Line>
				<Line Number="5" Count="-1">                                                   2, 3, 4, 1, 1, 2, 1, 2, 4, 1, 2, 3, 2, 1, 1, 2, 2, 3};</Line>
				<Line Number="6" Count="2">    game g1 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, true, true);</Line>
				<Line Number="7" Count="2">    game g2 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);</Line>
				<Line Number="8" Count="2">    if (g1 == NULL || g2 == NULL)</Line>
				<Line Number="9" Count="0">        pass = false;</Line>
				<Line Number="10" Count="2">    if (game_nb_rows(g1) != DEFAULT_SIZE || game_nb_cols(g1) != DEFAULT_SIZE || !game_is_wrapping(g1) ||</Line>
				<Line Number="11" Count="2">        !game_is_unique(g1))</Line>
				<Line Number="12" Count="0">        pass = false;</Line>
				<Line Number="13" Count="4">    if (game_nb_rows(g2) != DEFAULT_SIZE || game_nb_cols(g2) != DEFAULT_SIZE || game_is_wrapping(g2) ||</Line>
				<Line Number="14" Count="2">        game_is_unique(g2))</Line>
				<Line Number="15" Count="0">        pass = false;</Line>
				<Line Number="16" Count="2">    if (!game_equal(g1, g2))</Line>
				<Line Number="17" Count="0">        pass = false;</Line>
				<Line Number="18" Count="2">    game_delete(g1);</Line>
				<Line Number="19" Count="2">    game_delete(g2);</Line>
				<Line Number="20" Count="-1"></Line>
				<Line Number="21" Count="2">    game g3 = game_new_ext(3, 4, squares, false, true);</Line>
				<Line Number="22" Count="2">    if (g3 == NULL)</Line>
				<Line Number="23" Count="0">        pass = false;</Line>
				<Line Number="24" Count="2">    if (game_nb_rows(g3) != 3 || game_nb_cols(g3) != 4)</Line>
				<Line Number="25" Count="0">        pass = false;</Line>
				<Line Number="26" Count="2">    if (!game_is_unique(g3) &amp;&amp; game_is_wrapping(g3))</Line>
				<Line Number="27" Count="0">        pass = false;</Line>
				<Line Number="28" Count="2">    game_delete(g3);</Line>
				<Line Number="29" Count="2">    return pass;</Line>
				<Line Number="30" Count="-1">}</Line>
				<Line Number="31" Count="-1"></Line>
				<Line Number="32" Count="2">bool test_game_new_empty_ext(void) {</Line>
				<Line Number="33" Count="2">    bool pass = true;</Line>
				<Line Number="34" Count="2">    game g = game_new_empty_ext(DEFAULT_SIZE, DEFAULT_SIZE, 1, 1);</Line>
				<Line Number="35" Count="2">    game empty = game_new_empty();</Line>
				<Line Number="36" Count="2">    if (g == NULL || empty == NULL)</Line>
				<Line Number="37" Count="0">        pass = false;</Line>
				<Line Number="38" Count="2">    if (game_nb_rows(g) != DEFAULT_SIZE || game_nb_cols(g) != DEFAULT_SIZE || !game_is_wrapping(g) ||</Line>
				<Line Number="39" Count="2">        !game_is_unique(g))</Line>
				<Line Number="40" Count="0">        pass = false;</Line>
				<Line Number="41" Count="2">    if (!game_equal(g, empty))</Line>
				<Line Number="42" Count="0">        pass = false;</Line>
				<Line Number="43" Count="2">    game_delete(empty);</Line>
				<Line Number="44" Count="2">    game_delete(g);</Line>
				<Line Number="45" Count="2">    return pass;</Line>
				<Line Number="46" Count="-1">}</Line>
				<Line Number="47" Count="-1"></Line>
				<Line Number="48" Count="2">bool test_game_undo(void) {</Line>
				<Line Number="49" Count="2">    bool pass = true;</Line>
				<Line Number="50" Count="2">    game g = game_new_empty_ext(5, 5, false, false);</Line>
				<Line Number="51" Count="2">    game_play_move(g, 0, 0, S_ONE);</Line>
				<Line Number="52" Count="2">    square before = game_get_square(g, 0, 0);</Line>
				<Line Number="53" Count="2">    game_undo(g);</Line>
				<Line Number="54" Count="2">    square after = game_get_square(g, 0, 0);</Line>
				<Line Number="55" Count="2">    if (before != S_ONE || after != S_EMPTY)</Line>
				<Line Number="56" Count="0">        pass = false;</Line>
				<Line Number="57" Count="2">    game_play_move(g, 0, 0, S_ONE);</Line>
				<Line Number="58" Count="2">    game_play_move(g, 0, 1, S_ONE);</Line>
				<Line Number="59" Count="2">    game_play_move(g, 0, 2, S_ONE);</Line>
				<Line Number="60" Count="2">    square before2 = game_get_square(g, 0, 1);</Line>
				<Line Number="61" Count="2">    square before3 = game_get_square(g, 0, 2);</Line>
				<Line Number="62" Count="2">    game_undo(g);</Line>
				<Line Number="63" Count="2">    game_undo(g);</Line>
				<Line Number="64" Count="2">    square after2 = game_get_square(g, 0, 1);</Line>
				<Line Number="65" Count="2">    square after3 = game_get_square(g, 0, 2);</Line>
				<Line Number="66" Count="2">    if (before2 == after2 || before3 == after3)</Line>
				<Line Number="67" Count="0">        pass = false;</Line>
				<Line Number="68" Count="2">    game_delete(g);</Line>
				<Line Number="69" Count="2">    return pass;</Line>
				<Line Number="70" Count="-1">}</Line>
				<Line Number="71" Count="-1"></Line>
				<Line Number="72" Count="2">bool test_game_redo(void) {</Line>
				<Line Number="73" Count="2">    bool pass = true;</Line>
				<Line Number="74" Count="2">    game g = game_new_empty_ext(5, 5, false, false);</Line>
				<Line Number="75" Count="2">    game_play_move(g, 0, 0, S_ONE);</Line>
				<Line Number="76" Count="2">    game_play_move(g, 0, 1, S_ONE);</Line>
				<Line Number="77" Count="2">    game_play_move(g, 0, 2, S_ONE);</Line>
				<Line Number="78" Count="2">    game_undo(g);</Line>
				<Line Number="79" Count="2">    game_undo(g);</Line>
				<Line Number="80" Count="2">    square before = game_get_square(g, 0, 1);</Line>
				<Line Number="81" Count="2">    square before2 = game_get_square(g, 0, 2);</Line>
				<Line Number="82" Count="2">    game_redo(g);</Line>
				<Line Number="83" Count="2">    game_redo(g);</Line>
				<Line Number="84" Count="2">    square after = game_get_square(g, 0, 1);</Line>
				<Line Number="85" Count="2">    square after2 = game_get_square(g, 0, 2);</Line>
				<Line Number="86" Count="2">    if (before == after || before2 == after2)</Line>
				<Line Number="87" Count="0">        pass = false;</Line>
				<Line Number="88" Count="2">    game_play_move(g, 1, 0, S_ONE);</Line>
				<Line Number="89" Count="2">    game_play_move(g, 1, 1, S_ONE);</Line>
				<Line Number="90" Count="2">    game_play_move(g, 1, 2, S_ONE);</Line>
				<Line Number="91" Count="2">    game_undo(g);</Line>
				<Line Number="92" Count="2">    game_undo(g);</Line>
				<Line Number="93" Count="2">    game_play_move(g, 2, 0, S_ONE);</Line>
				<Line Number="94" Count="2">    game_play_move(g, 2, 0, S_ZERO);</Line>
				<Line Number="95" Count="2">    game_undo(g);</Line>
				<Line Number="96" Count="2">    square before3 = game_get_square(g, 2, 0);</Line>
				<Line Number="97" Count="2">    game_redo(g);</Line>
				<Line Number="98" Count="2">    square after3 = game_get_square(g, 2, 0);</Line>
				<Line Number="99" Count="2">    if (before3 == after3)</Line>
				<Line Number="100" Count="0">        pass = false;</Line>
				<Line Number="101" Count="2">    game_delete(g);</Line>
				<Line Number="102" Count="2">    return pass;</Line>
				<Line Number="103" Count="-1">}</Line>
				<Line Number="104" Count="-1"></Line>
				<Line Number="105" Count="2">bool test_game_nb_rows(void) {</Line>
				<Line Number="106" Count="2">    bool pass = true;</Line>
				<Line Number="107" Count="2">    game g = game_new_empty_ext(12, 12, false, false);</Line>
				<Line Number="108" Count="2">    game g2 = game_new_empty_ext(8, 4, false, false);</Line>
				<Line Number="109" Count="2">    if (!g || !g2)</Line>
				<Line Number="110" Count="0">        return false;</Line>
				<Line Number="111" Count="2">    if (game_nb_rows(g) != 12 || game_nb_rows(g2) != 8)</Line>
				<Line Number="112" Count="0">        pass = false;</Line>
				<Line Number="113" Count="2">    game_delete(g);</Line>
				<Line Number="114" Count="2">    game_delete(g2);</Line>
				<Line Number="115" Count="2">    return pass;</Line>
				<Line Number="116" Count="-1">}</Line>
				<Line Number="117" Count="-1"></Line>
				<Line Number="118" Count="2">bool test_game_nb_cols(void) {</Line>
				<Line Number="119" Count="2">    bool pass = true;</Line>
				<Line Number="120" Count="2">    game g = game_new_empty_ext(12, 12, false, false);</Line>
				<Line Number="121" Count="2">    game g2 = game_new_empty_ext(8, 4, false, false);</Line>
				<Line Number="122" Count="2">    if (!g || !g2)</Line>
				<Line Number="123" Count="0">        return false;</Line>
				<Line Number="124" Count="-1">    // if (game_nb_cols(g) != 12 || game_nb_cols(g2) != 4)</Line>
				<Line Number="125" Count="-1">    //     pass = false;</Line>
				<Line Number="126" Count="2">    game_delete(g);</Line>
				<Line Number="127" Count="2">    game_delete(g2);</Line>
				<Line Number="128" Count="2">    return pass;</Line>
				<Line Number="129" Count="-1">}</Line>
				<Line Number="130" Count="-1"></Line>
				<Line Number="131" Count="2">bool test_game_is_unique(void) {</Line>
				<Line Number="132" Count="2">    bool pass = true;</Line>
				<Line Number="133" Count="2">    game g1 = game_new_empty_ext(8, 8, false, true);</Line>
				<Line Number="134" Count="2">    game g2 = game_new_empty_ext(8, 8, false, false);</Line>
				<Line Number="135" Count="2">    if (!game_is_unique(g1) || game_is_unique(g2))</Line>
				<Line Number="136" Count="0">        pass = false;</Line>
				<Line Number="137" Count="2">    game_delete(g1);</Line>
				<Line Number="138" Count="2">    game_delete(g2);</Line>
				<Line Number="139" Count="2">    return pass;</Line>
				<Line Number="140" Count="-1">}</Line>
				<Line Number="141" Count="-1"></Line>
				<Line Number="142" Count="2">bool test_game_is_wrapping(void) {</Line>
				<Line Number="143" Count="2">    bool pass = true;</Line>
				<Line Number="144" Count="2">    game g1 = game_new_empty_ext(8, 8, true, false);</Line>
				<Line Number="145" Count="2">    game g2 = game_new_empty_ext(8, 8, false, false);</Line>
				<Line Number="146" Count="2">    if (!game_is_wrapping(g1) || game_is_wrapping(g2))</Line>
				<Line Number="147" Count="0">        return false;</Line>
				<Line Number="148" Count="2">    game_delete(g1);</Line>
				<Line Number="149" Count="2">    game_delete(g2);</Line>
				<Line Number="150" Count="2">    return pass;</Line>
				<Line Number="151" Count="-1">}</Line>
				<Line Number="152" Count="-1"></Line>
				<Line Number="153" Count="-1">/*  USAGE  */</Line>
				<Line Number="154" Count="0">void usage(char *argv[]) {</Line>
				<Line Number="155" Count="0">    fprintf(stderr, "Usage: %s &lt;testname&gt; [&lt;...&gt;]\n", argv[0]);</Line>
				<Line Number="156" Count="0">    exit(EXIT_FAILURE);</Line>
				<Line Number="157" Count="-1">}</Line>
				<Line Number="158" Count="-1"></Line>
				<Line Number="159" Count="-1">/*  MAIN ROUTINE  */</Line>
				<Line Number="160" Count="16">int main(int argc, char *argv[]) {</Line>
				<Line Number="161" Count="16">    if (argc == 1)</Line>
				<Line Number="162" Count="0">        usage(argv);</Line>
				<Line Number="163" Count="-1"></Line>
				<Line Number="164" Count="16">    fprintf(stderr, "=&gt; Start test \"%s\"\n", argv[1]);</Line>
				<Line Number="165" Count="16">    bool pass = false;</Line>
				<Line Number="166" Count="16">    if (strcmp("game_new_ext", argv[1]) == 0)</Line>
				<Line Number="167" Count="2">        pass = test_game_new_ext();</Line>
				<Line Number="168" Count="14">    else if (strcmp("game_new_empty_ext", argv[1]) == 0)</Line>
				<Line Number="169" Count="2">        pass = test_game_new_empty_ext();</Line>
				<Line Number="170" Count="12">    else if (strcmp("game_undo", argv[1]) == 0)</Line>
				<Line Number="171" Count="2">        pass = test_game_undo();</Line>
				<Line Number="172" Count="10">    else if (strcmp("game_redo", argv[1]) == 0)</Line>
				<Line Number="173" Count="2">        pass = test_game_redo();</Line>
				<Line Number="174" Count="8">    else if (strcmp("game_nb_rows", argv[1]) == 0)</Line>
				<Line Number="175" Count="2">        pass = test_game_nb_rows();</Line>
				<Line Number="176" Count="6">    else if (strcmp("game_nb_cols", argv[1]) == 0)</Line>
				<Line Number="177" Count="2">        pass = test_game_nb_cols();</Line>
				<Line Number="178" Count="4">    else if (strcmp("game_is_unique", argv[1]) == 0)</Line>
				<Line Number="179" Count="2">        pass = test_game_is_unique();</Line>
				<Line Number="180" Count="2">    else if (strcmp("game_is_wrapping", argv[1]) == 0)</Line>
				<Line Number="181" Count="2">        pass = test_game_is_wrapping();</Line>
				<Line Number="182" Count="-1">    else {</Line>
				<Line Number="183" Count="0">        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);</Line>
				<Line Number="184" Count="0">        exit(EXIT_FAILURE);</Line>
				<Line Number="185" Count="-1">    }</Line>
				<Line Number="186" Count="-1"></Line>
				<Line Number="187" Count="16">    if (pass == true) {</Line>
				<Line Number="188" Count="16">        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);</Line>
				<Line Number="189" Count="16">        return EXIT_SUCCESS;</Line>
				<Line Number="190" Count="-1">    } else {</Line>
				<Line Number="191" Count="0">        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);</Line>
				<Line Number="192" Count="0">        return EXIT_FAILURE;</Line>
				<Line Number="193" Count="-1">    }</Line>
				<Line Number="194" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="test_mode_error.c" FullPath="./tests/test_mode_error.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="2">bool test_is_unique_array() { </Line>
				<Line Number="3" Count="2">    bool pass = true;</Line>
				<Line Number="4" Count="2">    square array1[4 * 4] = {1, 3, 2, 2, 1, 1, 2, 4, 1, 4, 1, 3, 3, 2, 1, 4};</Line>
				<Line Number="5" Count="2">    square array2[4 * 4] = {1, 0, 0, 3, 4, 0, 0, 2, 2, 0, 0, 4, 1, 0, 0, 3};</Line>
				<Line Number="6" Count="2">    square array3[4 * 4] = {1, 4, 2, 3, 2, 1, 1, 2, 4, 4, 1, 3, 1, 3, 4, 2};</Line>
				<Line Number="7" Count="2">    game g1 = game_new_ext(4, 4, array1, true, false);</Line>
				<Line Number="8" Count="2">    game g2 = game_new_ext(4, 4, array2, true, false);</Line>
				<Line Number="9" Count="2">    game g3 = game_new_ext(4, 4, array3, true, false);</Line>
				<Line Number="10" Count="2">    if (is_unique_array(g1, 0, 0))</Line>
				<Line Number="11" Count="0">        pass = false;</Line>
				<Line Number="12" Count="2">    if (is_unique_array(g2, 0, 0))</Line>
				<Line Number="13" Count="0">        pass = false;</Line>
				<Line Number="14" Count="2">    if (!is_unique_array(g3, 0, 0))</Line>
				<Line Number="15" Count="0">        pass = false;</Line>
				<Line Number="16" Count="2">    game_delete(g1);</Line>
				<Line Number="17" Count="2">    game_delete(g2);</Line>
				<Line Number="18" Count="2">    game_delete(g3);</Line>
				<Line Number="19" Count="2">    return pass;</Line>
				<Line Number="20" Count="-1">}</Line>
				<Line Number="21" Count="-1"></Line>
				<Line Number="22" Count="2">bool test_is_array_same() {</Line>
				<Line Number="23" Count="2">    bool pass = true;</Line>
				<Line Number="24" Count="2">    square array1[6] = {1, 1, 1, 1, 1, 1};</Line>
				<Line Number="25" Count="2">    square array2[6] = {1, 3, 1, 3, 1, 3};</Line>
				<Line Number="26" Count="2">    square array3[6] = {2, 2, 2, 2, 2, 2};</Line>
				<Line Number="27" Count="2">    square array4[6] = {2, 4, 4, 4, 2, 2};</Line>
				<Line Number="28" Count="2">    if (!is_array_same(array1, array2, 6))</Line>
				<Line Number="29" Count="0">        pass = false;</Line>
				<Line Number="30" Count="2">    if (is_array_same(array1, array3, 6))</Line>
				<Line Number="31" Count="0">        pass = false;</Line>
				<Line Number="32" Count="2">    if (is_array_same(array2, array3, 6))</Line>
				<Line Number="33" Count="0">        pass = false;</Line>
				<Line Number="34" Count="2">    if (is_array_same(array1, array4, 6))</Line>
				<Line Number="35" Count="0">        pass = false;</Line>
				<Line Number="36" Count="2">    if (!is_array_same(array3, array4, 6))</Line>
				<Line Number="37" Count="0">        pass = false;</Line>
				<Line Number="38" Count="2">    return pass;</Line>
				<Line Number="39" Count="-1">}</Line>
				<Line Number="40" Count="-1"></Line>
				<Line Number="41" Count="2">bool test_is_consecutive_grid() {</Line>
				<Line Number="42" Count="2">    bool pass = true;</Line>
				<Line Number="43" Count="2">    square square_1[4 * 4] = {3, 1, 1, 2, 4, 3, 2, 1, 4, 2, 3, 1, 1, 2, 2, 2};</Line>
				<Line Number="44" Count="2">    game g1 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, square_1, false, false);</Line>
				<Line Number="45" Count="2">    square square_2[4 * 4] = {1, 1, 2, 3, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2};</Line>
				<Line Number="46" Count="2">    game g2 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, square_2, false, false);</Line>
				<Line Number="47" Count="2">    square square_3[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 4, 3, 2, 2, 1, 2, 1, 2, 1, 3, 4, 2, 1, 1, 2, 2, 1, </Line>
				<Line Number="48" Count="-1">                                                    2, 1, 3, 4, 4, 1, 1, 2, 3, 1, 3, 2, 3, 3, 2, 1, 4, 2};</Line>
				<Line Number="49" Count="2">    game g3 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, square_3, false, false);</Line>
				<Line Number="50" Count="2">    square square_4[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 4, 3, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2,</Line>
				<Line Number="51" Count="-1">                                                    2, 3, 4, 1, 1, 2, 1, 2, 4, 1, 2, 3, 2, 1, 1, 2, 2, 3};</Line>
				<Line Number="52" Count="2">    game g4 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, square_4, false, false);</Line>
				<Line Number="53" Count="2">    if (!is_consecutive_grid(g1, 0, 0))</Line>
				<Line Number="54" Count="0">        pass = false;</Line>
				<Line Number="55" Count="2">    if (!is_consecutive_grid(g2, 0, 0))</Line>
				<Line Number="56" Count="0">        pass = false;</Line>
				<Line Number="57" Count="2">    if (!is_consecutive_grid(g3, 0, 0))</Line>
				<Line Number="58" Count="0">        pass = false; </Line>
				<Line Number="59" Count="2">    if (is_consecutive_grid(g4, 0, 0))</Line>
				<Line Number="60" Count="0">        pass = false; </Line>
				<Line Number="61" Count="2">    game_delete(g1);</Line>
				<Line Number="62" Count="2">    game_delete(g2);</Line>
				<Line Number="63" Count="2">    game_delete(g3);</Line>
				<Line Number="64" Count="2">    game_delete(g4);</Line>
				<Line Number="65" Count="2">    return pass;</Line>
				<Line Number="66" Count="-1">}</Line>
				<Line Number="67" Count="-1"></Line>
				<Line Number="68" Count="2">bool test_is_consecutive() {</Line>
				<Line Number="69" Count="2">    bool pass = true;</Line>
				<Line Number="70" Count="2">    square square_1[DEFAULT_SIZE] = {1, 1, 3, 2, 4, 3};</Line>
				<Line Number="71" Count="2">    game g1 = game_new_ext(1, DEFAULT_SIZE, square_1, false, false);</Line>
				<Line Number="72" Count="2">    square square_2[DEFAULT_SIZE] = {4, 2, 4, 1, 2, 3};</Line>
				<Line Number="73" Count="2">    game g2 = game_new_ext(1, DEFAULT_SIZE, square_2, false, false);</Line>
				<Line Number="74" Count="2">    square square_3[DEFAULT_SIZE] = {1, 1, 2, 2, 1, 1};</Line>
				<Line Number="75" Count="2">    game g3 = game_new_ext(1, DEFAULT_SIZE, square_3, false, false);</Line>
				<Line Number="76" Count="2">    square square_4[DEFAULT_SIZE] = {1, 3, 2, 4, 1, 2};</Line>
				<Line Number="77" Count="2">    game g4 = game_new_ext(1, DEFAULT_SIZE, square_4, false, false);</Line>
				<Line Number="78" Count="2">    if(!is_consecutive(square_1, DEFAULT_SIZE, game_get_number(g1, 0, 0)))</Line>
				<Line Number="79" Count="0">        pass = false;</Line>
				<Line Number="80" Count="2">    if(!is_consecutive(square_2, DEFAULT_SIZE, game_get_number(g2, 0, 0)))</Line>
				<Line Number="81" Count="0">        pass = false;</Line>
				<Line Number="82" Count="2">    if(!is_consecutive(square_3, DEFAULT_SIZE, game_get_number(g3, 0, 0)))</Line>
				<Line Number="83" Count="0">        pass = false;</Line>
				<Line Number="84" Count="2">    if(is_consecutive(square_4, DEFAULT_SIZE, game_get_number(g4, 0, 0)))</Line>
				<Line Number="85" Count="0">        pass = false;</Line>
				<Line Number="86" Count="2">    game_delete(g1);</Line>
				<Line Number="87" Count="2">    game_delete(g2);</Line>
				<Line Number="88" Count="2">    game_delete(g3);</Line>
				<Line Number="89" Count="2">    game_delete(g4);</Line>
				<Line Number="90" Count="2">    return pass;</Line>
				<Line Number="91" Count="-1">}</Line>
				<Line Number="92" Count="-1"></Line>
				<Line Number="93" Count="2">bool test_get_number() {</Line>
				<Line Number="94" Count="2">    bool pass = true;</Line>
				<Line Number="95" Count="2">    square a = S_ONE;</Line>
				<Line Number="96" Count="2">    square b = S_ZERO;</Line>
				<Line Number="97" Count="2">    square c = S_IMMUTABLE_ONE;</Line>
				<Line Number="98" Count="2">    square d = S_IMMUTABLE_ZERO;</Line>
				<Line Number="99" Count="2">    square e = S_EMPTY;</Line>
				<Line Number="100" Count="4">    if (get_number(e) != -1 || (get_number(a) != 1 || get_number(c) != 1) ||</Line>
				<Line Number="101" Count="4">        (get_number(b) != 0 || get_number(d) != 0)) {</Line>
				<Line Number="102" Count="0">        pass = false;</Line>
				<Line Number="103" Count="-1">    }</Line>
				<Line Number="104" Count="2">    return pass;</Line>
				<Line Number="105" Count="-1">}</Line>
				<Line Number="106" Count="-1"></Line>
				<Line Number="107" Count="2">bool test_rotate_array() {</Line>
				<Line Number="108" Count="2">    bool pass = true;</Line>
				<Line Number="109" Count="2">    square array[6] = {1, 3, 1, 3, 1, 3};</Line>
				<Line Number="110" Count="2">    square array2[6] = {1, 3, 1, 3, 1, 3};</Line>
				<Line Number="111" Count="2">    rotate_array(array2, 6);</Line>
				<Line Number="112" Count="2">    square array3[6] = {3, 1, 3, 1, 3, 1};</Line>
				<Line Number="113" Count="2">    square array4[6] = {1, 3, 1, 3, 1, 3};</Line>
				<Line Number="114" Count="2">    print_array(array, 6);</Line>
				<Line Number="115" Count="2">    print_array(array2, 6);</Line>
				<Line Number="116" Count="2">    print_array(array3, 6);</Line>
				<Line Number="117" Count="2">    if (!is_array_same(array, array2, 6))</Line>
				<Line Number="118" Count="0">        pass = false;</Line>
				<Line Number="119" Count="2">    if (!is_array_same(array2, array3, 6))</Line>
				<Line Number="120" Count="0">        pass = false;</Line>
				<Line Number="121" Count="14">    for (uint i = 0; i &lt; DEFAULT_SIZE; i++) {</Line>
				<Line Number="122" Count="12">        rotate_array(array4, 6);</Line>
				<Line Number="123" Count="-1">    }</Line>
				<Line Number="124" Count="2">    if (!is_array_same(array, array4, 6))</Line>
				<Line Number="125" Count="0">        pass = false;</Line>
				<Line Number="126" Count="2">    return pass;</Line>
				<Line Number="127" Count="-1">}</Line>
				<Line Number="128" Count="-1"></Line>
				<Line Number="129" Count="2">bool test_get_col() {</Line>
				<Line Number="130" Count="2">    bool pass = true;</Line>
				<Line Number="131" Count="2">    square square_1[DEFAULT_SIZE * 2] = {1, 2, 1, 1, 2, 1, 3, 4, 3, 4, 3, 4};</Line>
				<Line Number="132" Count="2">    game g = game_new_ext(DEFAULT_SIZE, 2, square_1, false, false);</Line>
				<Line Number="133" Count="2">    square square_2[DEFAULT_SIZE] = {1, 1, 2, 3, 3, 3};</Line>
				<Line Number="134" Count="2">    square square_3[DEFAULT_SIZE] = {2, 1, 1, 4, 4, 4};</Line>
				<Line Number="135" Count="2">    square square_4[DEFAULT_SIZE] = {3, 2, 1, 3, 2, 1};</Line>
				<Line Number="136" Count="2">    square *col_0 = get_col(g, 0);</Line>
				<Line Number="137" Count="2">    square *col_1 = get_col(g, 1);</Line>
				<Line Number="138" Count="2">    if (!is_array_same(col_0, square_2, 2))</Line>
				<Line Number="139" Count="0">        pass = false;</Line>
				<Line Number="140" Count="2">    if (!is_array_same(col_1, square_3, 2))</Line>
				<Line Number="141" Count="0">        pass = false;</Line>
				<Line Number="142" Count="2">    if (is_array_same(col_0, square_4, 2))</Line>
				<Line Number="143" Count="0">        pass = false;</Line>
				<Line Number="144" Count="2">    if (is_array_same(col_1, square_4, 2))</Line>
				<Line Number="145" Count="0">        pass = false;</Line>
				<Line Number="146" Count="2">    free(col_0);</Line>
				<Line Number="147" Count="2">    free(col_1);</Line>
				<Line Number="148" Count="2">    game_delete(g);</Line>
				<Line Number="149" Count="2">    return pass;</Line>
				<Line Number="150" Count="-1">}</Line>
				<Line Number="151" Count="-1"></Line>
				<Line Number="152" Count="2">bool test_get_row() {</Line>
				<Line Number="153" Count="2">    bool pass = true;</Line>
				<Line Number="154" Count="2">    square square_1[DEFAULT_SIZE * 2] = {1, 2, 1, 1, 2, 1, 3, 4, 3, 4, 3, 4};</Line>
				<Line Number="155" Count="2">    game g = game_new_ext(2, DEFAULT_SIZE, square_1, true, false);</Line>
				<Line Number="156" Count="2">    square square_2[DEFAULT_SIZE] = {1, 2, 1, 1, 2, 1};</Line>
				<Line Number="157" Count="2">    square square_3[DEFAULT_SIZE] = {3, 4, 3, 4, 3, 4};</Line>
				<Line Number="158" Count="2">    square square_4[DEFAULT_SIZE] = {1, 2, 3, 1, 2, 0};</Line>
				<Line Number="159" Count="2">    square *row_0 = get_row(g, 0);</Line>
				<Line Number="160" Count="2">    square *row_1 = get_row(g, 1);</Line>
				<Line Number="161" Count="2">    if (!is_array_same(row_0, square_2, 6))</Line>
				<Line Number="162" Count="0">        pass = false;</Line>
				<Line Number="163" Count="2">    if (!is_array_same(row_1, square_3, 6))</Line>
				<Line Number="164" Count="0">        pass = false;</Line>
				<Line Number="165" Count="2">    if (is_array_same(row_0, square_4, 6))</Line>
				<Line Number="166" Count="0">        pass = false;</Line>
				<Line Number="167" Count="2">    if (is_array_same(row_1, square_4, 6))</Line>
				<Line Number="168" Count="0">        pass = false;</Line>
				<Line Number="169" Count="2">    free(row_0);</Line>
				<Line Number="170" Count="2">    free(row_1);</Line>
				<Line Number="171" Count="2">    game_delete(g);</Line>
				<Line Number="172" Count="2">    return pass;</Line>
				<Line Number="173" Count="-1">}</Line>
				<Line Number="174" Count="-1"></Line>
				<Line Number="175" Count="0">bool test_is_array_full(){</Line>
				<Line Number="176" Count="0">    bool pass = true;</Line>
				<Line Number="177" Count="0">    square array1[DEFAULT_SIZE] = {1, 2, 3, 1, 2, 3};</Line>
				<Line Number="178" Count="0">    square array2[DEFAULT_SIZE] = {1, 0, 3, 1, 2, 3};</Line>
				<Line Number="179" Count="0">    if (!is_array_full(array1, DEFAULT_SIZE))</Line>
				<Line Number="180" Count="0">        pass = false;</Line>
				<Line Number="181" Count="0">    if (is_array_full(array2, DEFAULT_SIZE))</Line>
				<Line Number="182" Count="0">        pass = false;</Line>
				<Line Number="183" Count="0">    return pass;</Line>
				<Line Number="184" Count="-1">}</Line>
				<Line Number="185" Count="-1"></Line>
				<Line Number="186" Count="-1">/*  USAGE  */</Line>
				<Line Number="187" Count="0">void usage(char *argv[]) {</Line>
				<Line Number="188" Count="0">    fprintf(stderr, "Usage: %s &lt;testname&gt; [&lt;...&gt;]\n", argv[0]);</Line>
				<Line Number="189" Count="0">    exit(EXIT_FAILURE);</Line>
				<Line Number="190" Count="-1">}</Line>
				<Line Number="191" Count="-1"></Line>
				<Line Number="192" Count="-1">/*  MAIN ROUTINE  */</Line>
				<Line Number="193" Count="16">int main(int argc, char *argv[]) {</Line>
				<Line Number="194" Count="16">    if (argc == 1)</Line>
				<Line Number="195" Count="0">        usage(argv);</Line>
				<Line Number="196" Count="-1"></Line>
				<Line Number="197" Count="16">    fprintf(stderr, "=&gt; Start test \"%s\"\n", argv[1]);</Line>
				<Line Number="198" Count="16">    bool pass = false;</Line>
				<Line Number="199" Count="16">    if (strcmp("is_unique_array", argv[1]) == 0)</Line>
				<Line Number="200" Count="2">        pass = test_is_unique_array();</Line>
				<Line Number="201" Count="14">    else if (strcmp("is_array_same", argv[1]) == 0)</Line>
				<Line Number="202" Count="2">        pass = test_is_array_same();</Line>
				<Line Number="203" Count="12">    else if (strcmp("is_consecutive_grid", argv[1]) == 0)</Line>
				<Line Number="204" Count="2">        pass = test_is_consecutive_grid();</Line>
				<Line Number="205" Count="10">    else if (strcmp("is_consecutive", argv[1]) == 0)</Line>
				<Line Number="206" Count="2">        pass = test_is_consecutive();</Line>
				<Line Number="207" Count="8">    else if (strcmp("get_number", argv[1]) == 0)</Line>
				<Line Number="208" Count="2">        pass = test_get_number();</Line>
				<Line Number="209" Count="6">    else if (strcmp("rotate_array", argv[1]) == 0)</Line>
				<Line Number="210" Count="2">        pass = test_rotate_array();</Line>
				<Line Number="211" Count="4">    else if (strcmp("get_col", argv[1]) == 0)</Line>
				<Line Number="212" Count="2">        pass = test_get_col();</Line>
				<Line Number="213" Count="2">    else if (strcmp("get_row", argv[1]) == 0)</Line>
				<Line Number="214" Count="2">        pass = test_get_row();</Line>
				<Line Number="215" Count="0">    else if (strcmp("is_array_full", argv[1]) == 0)</Line>
				<Line Number="216" Count="0">        pass = test_is_array_full();</Line>
				<Line Number="217" Count="-1">    else {</Line>
				<Line Number="218" Count="0">        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);</Line>
				<Line Number="219" Count="0">        exit(EXIT_FAILURE);</Line>
				<Line Number="220" Count="-1">    }</Line>
				<Line Number="221" Count="-1"></Line>
				<Line Number="222" Count="16">    if (pass == true) {</Line>
				<Line Number="223" Count="16">        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);</Line>
				<Line Number="224" Count="16">        return EXIT_SUCCESS;</Line>
				<Line Number="225" Count="-1">    } else {</Line>
				<Line Number="226" Count="0">        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);</Line>
				<Line Number="227" Count="0">        return EXIT_FAILURE;</Line>
				<Line Number="228" Count="-1">    }</Line>
				<Line Number="229" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="test_move.c" FullPath="./tests/test_move.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="2">bool test_move_create() {</Line>
				<Line Number="3" Count="2">    move m = move_create(0, 0, S_ONE, S_EMPTY);</Line>
				<Line Number="4" Count="2">    if (m == NULL)</Line>
				<Line Number="5" Count="0">        return false;</Line>
				<Line Number="6" Count="2">    if (m-&gt;row != 0 || m-&gt;col != 0 || m-&gt;s != S_ONE || m-&gt;p != S_EMPTY)</Line>
				<Line Number="7" Count="0">        return false;</Line>
				<Line Number="8" Count="2">    free(m);</Line>
				<Line Number="9" Count="2">    m = NULL;</Line>
				<Line Number="10" Count="2">    return true;</Line>
				<Line Number="11" Count="-1">}</Line>
				<Line Number="12" Count="-1"></Line>
				<Line Number="13" Count="2">bool test_move_delete() {</Line>
				<Line Number="14" Count="2">    move m = move_create(0, 0, S_ONE, S_EMPTY);</Line>
				<Line Number="15" Count="2">    move_delete(m);</Line>
				<Line Number="16" Count="2">    m = NULL;</Line>
				<Line Number="17" Count="2">    if (m != NULL)</Line>
				<Line Number="18" Count="0">        return false;</Line>
				<Line Number="19" Count="2">    return true;</Line>
				<Line Number="20" Count="-1">}</Line>
				<Line Number="21" Count="-1"></Line>
				<Line Number="22" Count="2">bool test_move_row() {</Line>
				<Line Number="23" Count="2">    move m1 = move_create(0, 0, S_ONE, S_EMPTY);</Line>
				<Line Number="24" Count="2">    if (move_row(m1) != 0)</Line>
				<Line Number="25" Count="0">        return false;</Line>
				<Line Number="26" Count="2">    move_delete(m1);</Line>
				<Line Number="27" Count="2">    m1 = NULL;</Line>
				<Line Number="28" Count="2">    move m2 = move_create(10, 10, S_ONE, S_EMPTY);</Line>
				<Line Number="29" Count="2">    if (move_row(m2) != 10)</Line>
				<Line Number="30" Count="0">        return false;</Line>
				<Line Number="31" Count="2">    move_delete(m2);</Line>
				<Line Number="32" Count="2">    m2 = NULL;</Line>
				<Line Number="33" Count="2">    return true;</Line>
				<Line Number="34" Count="-1">}</Line>
				<Line Number="35" Count="-1"></Line>
				<Line Number="36" Count="2">bool test_move_col() {</Line>
				<Line Number="37" Count="2">    move m1 = move_create(0, 0, S_ONE, S_EMPTY);</Line>
				<Line Number="38" Count="2">    if (move_col(m1) != 0)</Line>
				<Line Number="39" Count="0">        return false;</Line>
				<Line Number="40" Count="2">    move_delete(m1);</Line>
				<Line Number="41" Count="2">    m1 = NULL;</Line>
				<Line Number="42" Count="2">    move m2 = move_create(10, 10, S_ONE, S_EMPTY);</Line>
				<Line Number="43" Count="2">    if (move_col(m2) != 10)</Line>
				<Line Number="44" Count="0">        return false;</Line>
				<Line Number="45" Count="2">    move_delete(m2);</Line>
				<Line Number="46" Count="2">    m2 = NULL;</Line>
				<Line Number="47" Count="2">    return true;</Line>
				<Line Number="48" Count="-1">}</Line>
				<Line Number="49" Count="-1"></Line>
				<Line Number="50" Count="2">bool test_move_s() {</Line>
				<Line Number="51" Count="2">    move m1 = move_create(0, 0, S_ONE, S_EMPTY);</Line>
				<Line Number="52" Count="2">    if (move_s(m1) != (square)S_ONE)</Line>
				<Line Number="53" Count="0">        return false;</Line>
				<Line Number="54" Count="2">    move_delete(m1);</Line>
				<Line Number="55" Count="2">    m1 = NULL;</Line>
				<Line Number="56" Count="2">    move m2 = move_create(10, 10, S_ZERO, S_EMPTY);</Line>
				<Line Number="57" Count="2">    if (move_s(m2) != (square)S_ZERO)</Line>
				<Line Number="58" Count="0">        return false;</Line>
				<Line Number="59" Count="2">    move_delete(m2);</Line>
				<Line Number="60" Count="2">    m2 = NULL;</Line>
				<Line Number="61" Count="2">    return true;</Line>
				<Line Number="62" Count="-1">}</Line>
				<Line Number="63" Count="-1"></Line>
				<Line Number="64" Count="2">bool test_move_p() {</Line>
				<Line Number="65" Count="2">    move m1 = move_create(0, 0, S_ONE, S_EMPTY);</Line>
				<Line Number="66" Count="2">    if (move_p(m1) != (square)S_EMPTY)</Line>
				<Line Number="67" Count="0">        return false;</Line>
				<Line Number="68" Count="2">    move_delete(m1);</Line>
				<Line Number="69" Count="2">    m1 = NULL;</Line>
				<Line Number="70" Count="2">    move m2 = move_create(10, 10, S_ZERO, S_IMMUTABLE_ONE);</Line>
				<Line Number="71" Count="2">    if (move_p(m2) != (square)S_IMMUTABLE_ONE)</Line>
				<Line Number="72" Count="0">        return false;</Line>
				<Line Number="73" Count="2">    move_delete(m2);</Line>
				<Line Number="74" Count="2">    m2 = NULL;</Line>
				<Line Number="75" Count="2">    return true;</Line>
				<Line Number="76" Count="-1">}</Line>
				<Line Number="77" Count="-1"></Line>
				<Line Number="78" Count="2">bool test_move_print() {</Line>
				<Line Number="79" Count="2">    move m1 = move_create(0, 0, S_ONE, S_EMPTY);</Line>
				<Line Number="80" Count="2">    move_print(m1);</Line>
				<Line Number="81" Count="2">    move_delete(m1);</Line>
				<Line Number="82" Count="2">    m1 = NULL;</Line>
				<Line Number="83" Count="2">    move m2 = move_create(10, 10, S_ZERO, S_IMMUTABLE_ONE);</Line>
				<Line Number="84" Count="2">    move_print(m2);</Line>
				<Line Number="85" Count="2">    move_delete(m2);</Line>
				<Line Number="86" Count="2">    m2 = NULL;</Line>
				<Line Number="87" Count="2">    return true;</Line>
				<Line Number="88" Count="-1">}</Line>
				<Line Number="89" Count="-1"></Line>
				<Line Number="90" Count="-1">/*  USAGE  */</Line>
				<Line Number="91" Count="0">void usage(char *argv[]) {</Line>
				<Line Number="92" Count="0">    fprintf(stderr, "Usage: %s &lt;testname&gt; [&lt;...&gt;]\n", argv[0]);</Line>
				<Line Number="93" Count="0">    exit(EXIT_FAILURE);</Line>
				<Line Number="94" Count="-1">}</Line>
				<Line Number="95" Count="-1"></Line>
				<Line Number="96" Count="-1">/*  MAIN ROUTINE  */</Line>
				<Line Number="97" Count="14">int main(int argc, char *argv[]) {</Line>
				<Line Number="98" Count="14">    if (argc == 1)</Line>
				<Line Number="99" Count="0">        usage(argv);</Line>
				<Line Number="100" Count="-1"></Line>
				<Line Number="101" Count="14">    fprintf(stderr, "=&gt; Start test \"%s\"\n", argv[1]);</Line>
				<Line Number="102" Count="14">    bool pass = false;</Line>
				<Line Number="103" Count="14">    if (strcmp("move_create", argv[1]) == 0)</Line>
				<Line Number="104" Count="2">        pass = test_move_create();</Line>
				<Line Number="105" Count="12">    else if (strcmp("move_delete", argv[1]) == 0)</Line>
				<Line Number="106" Count="2">        pass = test_move_delete();</Line>
				<Line Number="107" Count="10">    else if (strcmp("move_row", argv[1]) == 0)</Line>
				<Line Number="108" Count="2">        pass = test_move_row();</Line>
				<Line Number="109" Count="8">    else if (strcmp("move_col", argv[1]) == 0)</Line>
				<Line Number="110" Count="2">        pass = test_move_col();</Line>
				<Line Number="111" Count="6">    else if (strcmp("move_s", argv[1]) == 0)</Line>
				<Line Number="112" Count="2">        pass = test_move_s();</Line>
				<Line Number="113" Count="4">    else if (strcmp("move_p", argv[1]) == 0)</Line>
				<Line Number="114" Count="2">        pass = test_move_p();</Line>
				<Line Number="115" Count="2">    else if (strcmp("move_print", argv[1]) == 0)</Line>
				<Line Number="116" Count="2">        pass = test_move_print();</Line>
				<Line Number="117" Count="-1">    else {</Line>
				<Line Number="118" Count="0">        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);</Line>
				<Line Number="119" Count="0">        exit(EXIT_FAILURE);</Line>
				<Line Number="120" Count="-1">    }</Line>
				<Line Number="121" Count="-1"></Line>
				<Line Number="122" Count="14">    if (pass == true) {</Line>
				<Line Number="123" Count="14">        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);</Line>
				<Line Number="124" Count="14">        return EXIT_SUCCESS;</Line>
				<Line Number="125" Count="-1">    } else {</Line>
				<Line Number="126" Count="0">        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);</Line>
				<Line Number="127" Count="0">        return EXIT_FAILURE;</Line>
				<Line Number="128" Count="-1">    }</Line>
				<Line Number="129" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="test_move_stack.c" FullPath="./tests/test_move_stack.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="2">bool test_ms_create() {</Line>
				<Line Number="3" Count="2">    bool pass = true;</Line>
				<Line Number="4" Count="2">    ms stack = ms_create(5);</Line>
				<Line Number="5" Count="2">    if (stack == NULL || stack-&gt;data == NULL || stack-&gt;size != 0 || stack-&gt;capacity != 5)</Line>
				<Line Number="6" Count="0">        pass = false;</Line>
				<Line Number="7" Count="2">    ms_delete(stack);</Line>
				<Line Number="8" Count="2">    stack = NULL;</Line>
				<Line Number="9" Count="2">    return pass;</Line>
				<Line Number="10" Count="-1">}</Line>
				<Line Number="11" Count="-1"></Line>
				<Line Number="12" Count="2">bool test_ms_delete() {</Line>
				<Line Number="13" Count="2">    bool pass = true;</Line>
				<Line Number="14" Count="2">    ms stack = ms_create(5);</Line>
				<Line Number="15" Count="2">    ms_delete(stack);</Line>
				<Line Number="16" Count="2">    stack = NULL;</Line>
				<Line Number="17" Count="2">    return pass;</Line>
				<Line Number="18" Count="-1">}</Line>
				<Line Number="19" Count="-1"></Line>
				<Line Number="20" Count="2">bool test_ms_double_capacity() {</Line>
				<Line Number="21" Count="2">    bool pass = true;</Line>
				<Line Number="22" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="23" Count="2">    ms_double_capacity(stack);</Line>
				<Line Number="24" Count="2">    if (stack-&gt;capacity != 4)</Line>
				<Line Number="25" Count="0">        pass = false;</Line>
				<Line Number="26" Count="2">    ms_delete(stack);</Line>
				<Line Number="27" Count="2">    stack = NULL;</Line>
				<Line Number="28" Count="2">    return pass;</Line>
				<Line Number="29" Count="-1">}</Line>
				<Line Number="30" Count="-1"></Line>
				<Line Number="31" Count="2">bool test_ms_top() {</Line>
				<Line Number="32" Count="2">    bool pass = true;</Line>
				<Line Number="33" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="34" Count="2">    move m = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="35" Count="2">    ms_push(stack, m);</Line>
				<Line Number="36" Count="2">    move m2 = ms_top(stack);</Line>
				<Line Number="37" Count="2">    if (m2-&gt;row != 1 || m2-&gt;col != 2 || m2-&gt;s != S_ONE || m2-&gt;p != S_ZERO)</Line>
				<Line Number="38" Count="0">        pass = false;</Line>
				<Line Number="39" Count="2">    ms_delete(stack);</Line>
				<Line Number="40" Count="2">    stack = NULL;</Line>
				<Line Number="41" Count="2">    move_delete(m);</Line>
				<Line Number="42" Count="2">    m = NULL;</Line>
				<Line Number="43" Count="2">    ms_delete(stack);</Line>
				<Line Number="44" Count="2">    stack = NULL;</Line>
				<Line Number="45" Count="2">    return pass;</Line>
				<Line Number="46" Count="-1">}</Line>
				<Line Number="47" Count="-1"></Line>
				<Line Number="48" Count="2">bool test_ms_push() {</Line>
				<Line Number="49" Count="2">    bool pass = true;</Line>
				<Line Number="50" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="51" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="52" Count="2">    move m2 = ms_top(stack);</Line>
				<Line Number="53" Count="2">    if (m2 != NULL)</Line>
				<Line Number="54" Count="0">        pass = false;</Line>
				<Line Number="55" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="56" Count="2">    if (ms_top_row(stack) != 1 || ms_top_col(stack) != 2 || ms_top_s(stack) != S_ONE || ms_top_p(stack) != S_ZERO)</Line>
				<Line Number="57" Count="0">        pass = false;</Line>
				<Line Number="58" Count="2">    move_delete(m1);</Line>
				<Line Number="59" Count="2">    m1 = NULL;</Line>
				<Line Number="60" Count="2">    ms_delete(stack);</Line>
				<Line Number="61" Count="2">    stack = NULL;</Line>
				<Line Number="62" Count="2">    return pass;</Line>
				<Line Number="63" Count="-1">}</Line>
				<Line Number="64" Count="-1"></Line>
				<Line Number="65" Count="2">bool test_ms_pop() {</Line>
				<Line Number="66" Count="2">    bool pass = true;</Line>
				<Line Number="67" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="68" Count="2">    ms_pop(stack);</Line>
				<Line Number="69" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="70" Count="2">    move m2 = move_create(3, 4, S_ZERO, S_ONE);</Line>
				<Line Number="71" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="72" Count="2">    ms_push(stack, m2);</Line>
				<Line Number="73" Count="2">    ms_pop(stack);</Line>
				<Line Number="74" Count="2">    if (ms_top_row(stack) != 1 || ms_top_col(stack) != 2 || ms_top_s(stack) != S_ONE || ms_top_p(stack) != S_ZERO)</Line>
				<Line Number="75" Count="0">        pass = false;</Line>
				<Line Number="76" Count="2">    move_delete(m1);</Line>
				<Line Number="77" Count="2">    m1 = NULL;</Line>
				<Line Number="78" Count="2">    move_delete(m2);</Line>
				<Line Number="79" Count="2">    m2 = NULL;</Line>
				<Line Number="80" Count="2">    ms_delete(stack);</Line>
				<Line Number="81" Count="2">    stack = NULL;</Line>
				<Line Number="82" Count="2">    return pass;</Line>
				<Line Number="83" Count="-1">}</Line>
				<Line Number="84" Count="-1"></Line>
				<Line Number="85" Count="2">bool test_ms_clear() {</Line>
				<Line Number="86" Count="2">    bool pass = true;</Line>
				<Line Number="87" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="88" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="89" Count="2">    move m2 = move_create(3, 4, S_ZERO, S_ONE);</Line>
				<Line Number="90" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="91" Count="2">    ms_push(stack, m2);</Line>
				<Line Number="92" Count="2">    ms_clear(stack);</Line>
				<Line Number="93" Count="2">    if (stack-&gt;size != 0 || ms_top(stack) != NULL)</Line>
				<Line Number="94" Count="0">        pass = false;</Line>
				<Line Number="95" Count="2">    move_delete(m1);</Line>
				<Line Number="96" Count="2">    m1 = NULL;</Line>
				<Line Number="97" Count="2">    move_delete(m2);</Line>
				<Line Number="98" Count="2">    m2 = NULL;</Line>
				<Line Number="99" Count="2">    ms_delete(stack);</Line>
				<Line Number="100" Count="2">    stack = NULL;</Line>
				<Line Number="101" Count="2">    return pass;</Line>
				<Line Number="102" Count="-1">}</Line>
				<Line Number="103" Count="-1"></Line>
				<Line Number="104" Count="2">bool test_ms_top_row() {</Line>
				<Line Number="105" Count="2">    bool pass = true;</Line>
				<Line Number="106" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="107" Count="2">    printf("size: %d\n", stack-&gt;size);</Line>
				<Line Number="108" Count="2">    if (ms_top_row(stack) != -1)</Line>
				<Line Number="109" Count="0">        pass = false;</Line>
				<Line Number="110" Count="2">    printf("ms_top_row(stack) : %d\n", ms_top_row(stack));</Line>
				<Line Number="111" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="112" Count="2">    move m2 = move_create(3, 4, S_ZERO, S_ONE);</Line>
				<Line Number="113" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="114" Count="2">    ms_push(stack, m2);</Line>
				<Line Number="115" Count="2">    if (ms_top_row(stack) != 3)</Line>
				<Line Number="116" Count="0">        pass = false;</Line>
				<Line Number="117" Count="2">    ms_pop(stack);</Line>
				<Line Number="118" Count="2">    if (ms_top_row(stack) != 1)</Line>
				<Line Number="119" Count="0">        pass = false;</Line>
				<Line Number="120" Count="2">    move_delete(m1);</Line>
				<Line Number="121" Count="2">    m1 = NULL;</Line>
				<Line Number="122" Count="2">    move_delete(m2);</Line>
				<Line Number="123" Count="2">    m2 = NULL;</Line>
				<Line Number="124" Count="2">    ms_delete(stack);</Line>
				<Line Number="125" Count="2">    stack = NULL;</Line>
				<Line Number="126" Count="2">    return pass;</Line>
				<Line Number="127" Count="-1">}</Line>
				<Line Number="128" Count="-1"></Line>
				<Line Number="129" Count="2">bool test_ms_top_col() {</Line>
				<Line Number="130" Count="2">    bool pass = true;</Line>
				<Line Number="131" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="132" Count="2">    if (ms_top_col(stack) != -1)</Line>
				<Line Number="133" Count="0">        pass = false;</Line>
				<Line Number="134" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="135" Count="2">    move m2 = move_create(3, 4, S_ZERO, S_ONE);</Line>
				<Line Number="136" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="137" Count="2">    ms_push(stack, m2);</Line>
				<Line Number="138" Count="2">    if (ms_top_col(stack) != 4)</Line>
				<Line Number="139" Count="0">        pass = false;</Line>
				<Line Number="140" Count="2">    ms_pop(stack);</Line>
				<Line Number="141" Count="2">    if (ms_top_col(stack) != 2)</Line>
				<Line Number="142" Count="0">        pass = false;</Line>
				<Line Number="143" Count="2">    move_delete(m1);</Line>
				<Line Number="144" Count="2">    m1 = NULL;</Line>
				<Line Number="145" Count="2">    move_delete(m2);</Line>
				<Line Number="146" Count="2">    m2 = NULL;</Line>
				<Line Number="147" Count="2">    ms_delete(stack);</Line>
				<Line Number="148" Count="2">    stack = NULL;</Line>
				<Line Number="149" Count="2">    return pass;</Line>
				<Line Number="150" Count="-1">}</Line>
				<Line Number="151" Count="-1"></Line>
				<Line Number="152" Count="2">bool test_ms_top_s() {</Line>
				<Line Number="153" Count="2">    bool pass = true;</Line>
				<Line Number="154" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="155" Count="2">    if (ms_top_s(stack) != -2)</Line>
				<Line Number="156" Count="0">        pass = false;</Line>
				<Line Number="157" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="158" Count="2">    move m2 = move_create(3, 4, S_ZERO, S_ONE);</Line>
				<Line Number="159" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="160" Count="2">    ms_push(stack, m2);</Line>
				<Line Number="161" Count="2">    if (ms_top_s(stack) != S_ZERO)</Line>
				<Line Number="162" Count="0">        pass = false;</Line>
				<Line Number="163" Count="2">    ms_pop(stack);</Line>
				<Line Number="164" Count="2">    if (ms_top_s(stack) != S_ONE)</Line>
				<Line Number="165" Count="0">        pass = false;</Line>
				<Line Number="166" Count="2">    move_delete(m1);</Line>
				<Line Number="167" Count="2">    m1 = NULL;</Line>
				<Line Number="168" Count="2">    move_delete(m2);</Line>
				<Line Number="169" Count="2">    m2 = NULL;</Line>
				<Line Number="170" Count="2">    ms_delete(stack);</Line>
				<Line Number="171" Count="2">    stack = NULL;</Line>
				<Line Number="172" Count="2">    return pass;</Line>
				<Line Number="173" Count="-1">}</Line>
				<Line Number="174" Count="-1"></Line>
				<Line Number="175" Count="2">bool test_ms_top_p() {</Line>
				<Line Number="176" Count="2">    bool pass = true;</Line>
				<Line Number="177" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="178" Count="2">    if (ms_top_p(stack) != -2)</Line>
				<Line Number="179" Count="0">        pass = false;</Line>
				<Line Number="180" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="181" Count="2">    move m2 = move_create(3, 4, S_ZERO, S_ONE);</Line>
				<Line Number="182" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="183" Count="2">    ms_push(stack, m2);</Line>
				<Line Number="184" Count="2">    if (ms_top_p(stack) != S_ONE)</Line>
				<Line Number="185" Count="0">        pass = false;</Line>
				<Line Number="186" Count="2">    ms_pop(stack);</Line>
				<Line Number="187" Count="2">    if (ms_top_p(stack) != S_ZERO)</Line>
				<Line Number="188" Count="0">        pass = false;</Line>
				<Line Number="189" Count="2">    move_delete(m1);</Line>
				<Line Number="190" Count="2">    m1 = NULL;</Line>
				<Line Number="191" Count="2">    move_delete(m2);</Line>
				<Line Number="192" Count="2">    m2 = NULL;</Line>
				<Line Number="193" Count="2">    ms_delete(stack);</Line>
				<Line Number="194" Count="2">    stack = NULL;</Line>
				<Line Number="195" Count="2">    return pass;</Line>
				<Line Number="196" Count="-1">}</Line>
				<Line Number="197" Count="-1"></Line>
				<Line Number="198" Count="2">bool test_ms_is_empty() {</Line>
				<Line Number="199" Count="2">    bool pass = true;</Line>
				<Line Number="200" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="201" Count="2">    if (!ms_is_empty(stack) &amp;&amp; ms_is_empty(NULL))</Line>
				<Line Number="202" Count="0">        pass = false;</Line>
				<Line Number="203" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="204" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="205" Count="2">    if (ms_is_empty(stack))</Line>
				<Line Number="206" Count="0">        pass = false;</Line>
				<Line Number="207" Count="2">    ms_pop(stack);</Line>
				<Line Number="208" Count="2">    if (!ms_is_empty(stack))</Line>
				<Line Number="209" Count="0">        pass = false;</Line>
				<Line Number="210" Count="2">    move_delete(m1);</Line>
				<Line Number="211" Count="2">    m1 = NULL;</Line>
				<Line Number="212" Count="2">    ms_delete(stack);</Line>
				<Line Number="213" Count="2">    stack = NULL;</Line>
				<Line Number="214" Count="2">    return pass;</Line>
				<Line Number="215" Count="-1">}</Line>
				<Line Number="216" Count="-1"></Line>
				<Line Number="217" Count="2">bool test_ms_is_full() {</Line>
				<Line Number="218" Count="2">    bool pass = true;</Line>
				<Line Number="219" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="220" Count="2">    if (ms_is_full(stack))</Line>
				<Line Number="221" Count="0">        pass = false;</Line>
				<Line Number="222" Count="2">    if (ms_is_full(NULL))</Line>
				<Line Number="223" Count="0">        pass = false;</Line>
				<Line Number="224" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="225" Count="2">    move m2 = move_create(3, 4, S_ZERO, S_ONE);</Line>
				<Line Number="226" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="227" Count="2">    if (ms_is_full(stack))</Line>
				<Line Number="228" Count="0">        pass = false;</Line>
				<Line Number="229" Count="2">    ms_push(stack, m2);</Line>
				<Line Number="230" Count="2">    if (!ms_is_full(stack))</Line>
				<Line Number="231" Count="0">        pass = false;</Line>
				<Line Number="232" Count="2">    ms_pop(stack);</Line>
				<Line Number="233" Count="2">    if (ms_is_full(stack))</Line>
				<Line Number="234" Count="0">        pass = false;</Line>
				<Line Number="235" Count="2">    move_delete(m1);</Line>
				<Line Number="236" Count="2">    m1 = NULL;</Line>
				<Line Number="237" Count="2">    move_delete(m2);</Line>
				<Line Number="238" Count="2">    m2 = NULL;</Line>
				<Line Number="239" Count="2">    ms_delete(stack);</Line>
				<Line Number="240" Count="2">    stack = NULL;</Line>
				<Line Number="241" Count="2">    return pass;</Line>
				<Line Number="242" Count="-1">}</Line>
				<Line Number="243" Count="-1"></Line>
				<Line Number="244" Count="2">bool test_ms_print() {</Line>
				<Line Number="245" Count="2">    bool pass = true;</Line>
				<Line Number="246" Count="2">    ms stack = ms_create(2);</Line>
				<Line Number="247" Count="2">    move m1 = move_create(1, 2, S_ONE, S_ZERO);</Line>
				<Line Number="248" Count="2">    move m2 = move_create(3, 4, S_ZERO, S_ONE);</Line>
				<Line Number="249" Count="2">    ms_push(stack, m1);</Line>
				<Line Number="250" Count="2">    ms_push(stack, m2);</Line>
				<Line Number="251" Count="2">    ms_print(stack);</Line>
				<Line Number="252" Count="2">    move_delete(m1);</Line>
				<Line Number="253" Count="2">    m1 = NULL;</Line>
				<Line Number="254" Count="2">    move_delete(m2);</Line>
				<Line Number="255" Count="2">    m2 = NULL;</Line>
				<Line Number="256" Count="2">    ms_delete(stack);</Line>
				<Line Number="257" Count="2">    stack = NULL;</Line>
				<Line Number="258" Count="2">    return pass;</Line>
				<Line Number="259" Count="-1">}</Line>
				<Line Number="260" Count="-1"></Line>
				<Line Number="261" Count="-1">/*  USAGE  */</Line>
				<Line Number="262" Count="0">void usage(char *argv[]) {</Line>
				<Line Number="263" Count="0">    fprintf(stderr, "Usage: %s &lt;testname&gt; [&lt;...&gt;]\n", argv[0]);</Line>
				<Line Number="264" Count="0">    exit(EXIT_FAILURE);</Line>
				<Line Number="265" Count="-1">}</Line>
				<Line Number="266" Count="-1"></Line>
				<Line Number="267" Count="-1">/*  MAIN ROUTINE  */</Line>
				<Line Number="268" Count="28">int main(int argc, char *argv[]) {</Line>
				<Line Number="269" Count="28">    if (argc == 1)</Line>
				<Line Number="270" Count="0">        usage(argv);</Line>
				<Line Number="271" Count="-1"></Line>
				<Line Number="272" Count="28">    fprintf(stderr, "=&gt; Start test \"%s\"\n", argv[1]);</Line>
				<Line Number="273" Count="28">    bool pass = false;</Line>
				<Line Number="274" Count="28">    if (strcmp("ms_create", argv[1]) == 0)</Line>
				<Line Number="275" Count="2">        pass = test_ms_create();</Line>
				<Line Number="276" Count="26">    else if (strcmp("ms_delete", argv[1]) == 0)</Line>
				<Line Number="277" Count="2">        pass = test_ms_delete();</Line>
				<Line Number="278" Count="24">    else if (strcmp("ms_double_capacity", argv[1]) == 0)</Line>
				<Line Number="279" Count="2">        pass = test_ms_double_capacity();</Line>
				<Line Number="280" Count="22">    else if (strcmp("ms_top", argv[1]) == 0)</Line>
				<Line Number="281" Count="2">        pass = test_ms_top();</Line>
				<Line Number="282" Count="20">    else if (strcmp("ms_push", argv[1]) == 0)</Line>
				<Line Number="283" Count="2">        pass = test_ms_push();</Line>
				<Line Number="284" Count="18">    else if (strcmp("ms_pop", argv[1]) == 0)</Line>
				<Line Number="285" Count="2">        pass = test_ms_pop();</Line>
				<Line Number="286" Count="16">    else if (strcmp("ms_clear", argv[1]) == 0)</Line>
				<Line Number="287" Count="2">        pass = test_ms_clear();</Line>
				<Line Number="288" Count="14">    else if (strcmp("ms_top_row", argv[1]) == 0)</Line>
				<Line Number="289" Count="2">        pass = test_ms_top_row();</Line>
				<Line Number="290" Count="12">    else if (strcmp("ms_top_col", argv[1]) == 0)</Line>
				<Line Number="291" Count="2">        pass = test_ms_top_col();</Line>
				<Line Number="292" Count="10">    else if (strcmp("ms_top_s", argv[1]) == 0)</Line>
				<Line Number="293" Count="2">        pass = test_ms_top_s();</Line>
				<Line Number="294" Count="8">    else if (strcmp("ms_top_p", argv[1]) == 0)</Line>
				<Line Number="295" Count="2">        pass = test_ms_top_p();</Line>
				<Line Number="296" Count="6">    else if (strcmp("ms_is_empty", argv[1]) == 0)</Line>
				<Line Number="297" Count="2">        pass = test_ms_is_empty();</Line>
				<Line Number="298" Count="4">    else if (strcmp("ms_is_full", argv[1]) == 0)</Line>
				<Line Number="299" Count="2">        pass = test_ms_is_full();</Line>
				<Line Number="300" Count="2">    else if (strcmp("ms_print", argv[1]) == 0)</Line>
				<Line Number="301" Count="2">        pass = test_ms_print();</Line>
				<Line Number="302" Count="-1">    else {</Line>
				<Line Number="303" Count="0">        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);</Line>
				<Line Number="304" Count="0">        exit(EXIT_FAILURE);</Line>
				<Line Number="305" Count="-1">    }</Line>
				<Line Number="306" Count="-1"></Line>
				<Line Number="307" Count="28">    if (pass == true) {</Line>
				<Line Number="308" Count="28">        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);</Line>
				<Line Number="309" Count="28">        return EXIT_SUCCESS;</Line>
				<Line Number="310" Count="-1">    } else {</Line>
				<Line Number="311" Count="0">        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);</Line>
				<Line Number="312" Count="0">        return EXIT_FAILURE;</Line>
				<Line Number="313" Count="-1">    }</Line>
				<Line Number="314" Count="-1">}</Line>
			</Report>
		</File>
		<File Name="test_throw_assert.c" FullPath="./tests/test_throw_assert.c">
			<Report>
				<Line Number="0" Count="-1">#include "takuzu.h"</Line>
				<Line Number="1" Count="-1"></Line>
				<Line Number="2" Count="2">bool test_throw_error() {</Line>
				<Line Number="3" Count="2">    char *msg = NULL;</Line>
				<Line Number="4" Count="2">    if (!throw_error(msg)) {</Line>
				<Line Number="5" Count="2">        return true;</Line>
				<Line Number="6" Count="-1">    }</Line>
				<Line Number="7" Count="-1">    // Never executed</Line>
				<Line Number="8" Count="0">    return false;</Line>
				<Line Number="9" Count="-1">}</Line>
				<Line Number="10" Count="-1"></Line>
				<Line Number="11" Count="2">bool test_game_test() {</Line>
				<Line Number="12" Count="2">    game g = game_new_empty();</Line>
				<Line Number="13" Count="2">    char *msg = NULL;</Line>
				<Line Number="14" Count="2">    if (game_test(g, msg)) {</Line>
				<Line Number="15" Count="2">        game_delete(g);</Line>
				<Line Number="16" Count="2">        return true;</Line>
				<Line Number="17" Count="-1">    }</Line>
				<Line Number="18" Count="-1">    // Never executed</Line>
				<Line Number="19" Count="0">    return false;</Line>
				<Line Number="20" Count="-1">}</Line>
				<Line Number="21" Count="-1"></Line>
				<Line Number="22" Count="2">bool test_cgame_test() {</Line>
				<Line Number="23" Count="2">    game g = game_new_empty();</Line>
				<Line Number="24" Count="2">    char *msg = NULL;</Line>
				<Line Number="25" Count="2">    if (cgame_test(g, msg)) {</Line>
				<Line Number="26" Count="2">        game_delete(g);</Line>
				<Line Number="27" Count="2">        return true;</Line>
				<Line Number="28" Count="-1">    }</Line>
				<Line Number="29" Count="-1">    // Never executed</Line>
				<Line Number="30" Count="0">    return false;</Line>
				<Line Number="31" Count="-1">}</Line>
				<Line Number="32" Count="-1"></Line>
				<Line Number="33" Count="2">bool test_pointer_test() {</Line>
				<Line Number="34" Count="2">    char *ptr = malloc(sizeof *ptr);</Line>
				<Line Number="35" Count="2">    char *msg = NULL;</Line>
				<Line Number="36" Count="2">    if (pointer_test(ptr, msg)) {</Line>
				<Line Number="37" Count="2">        free(ptr);</Line>
				<Line Number="38" Count="2">        return true;</Line>
				<Line Number="39" Count="-1">    }</Line>
				<Line Number="40" Count="-1">    // Never executed</Line>
				<Line Number="41" Count="0">    return false;</Line>
				<Line Number="42" Count="-1">}</Line>
				<Line Number="43" Count="-1"></Line>
				<Line Number="44" Count="-1">/*  USAGE  */</Line>
				<Line Number="45" Count="0">void usage(char *argv[]) {</Line>
				<Line Number="46" Count="0">    fprintf(stderr, "Usage: %s &lt;testname&gt; [&lt;...&gt;]\n", argv[0]);</Line>
				<Line Number="47" Count="0">    exit(EXIT_FAILURE);</Line>
				<Line Number="48" Count="-1">}</Line>
				<Line Number="49" Count="-1"></Line>
				<Line Number="50" Count="-1">/*  MAIN ROUTINE  */</Line>
				<Line Number="51" Count="8">int main(int argc, char *argv[]) {</Line>
				<Line Number="52" Count="8">    if (argc == 1)</Line>
				<Line Number="53" Count="0">        usage(argv);</Line>
				<Line Number="54" Count="-1"></Line>
				<Line Number="55" Count="8">    fprintf(stderr, "=&gt; Start test \"%s\"\n", argv[1]);</Line>
				<Line Number="56" Count="8">    bool pass = false;</Line>
				<Line Number="57" Count="8">    if (strcmp("throw_error", argv[1]) == 0)</Line>
				<Line Number="58" Count="2">        pass = test_throw_error();</Line>
				<Line Number="59" Count="6">    else if (strcmp("game_test", argv[1]) == 0)</Line>
				<Line Number="60" Count="2">        pass = test_game_test();</Line>
				<Line Number="61" Count="4">    else if (strcmp("cgame_test", argv[1]) == 0)</Line>
				<Line Number="62" Count="2">        pass = test_cgame_test();</Line>
				<Line Number="63" Count="2">    else if (strcmp("pointer_test", argv[1]) == 0)</Line>
				<Line Number="64" Count="2">        pass = test_pointer_test();</Line>
				<Line Number="65" Count="-1">    else {</Line>
				<Line Number="66" Count="0">        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);</Line>
				<Line Number="67" Count="0">        exit(EXIT_FAILURE);</Line>
				<Line Number="68" Count="-1">    }</Line>
				<Line Number="69" Count="-1"></Line>
				<Line Number="70" Count="8">    if (pass == true) {</Line>
				<Line Number="71" Count="8">        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);</Line>
				<Line Number="72" Count="8">        return EXIT_SUCCESS;</Line>
				<Line Number="73" Count="-1">    } else {</Line>
				<Line Number="74" Count="0">        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);</Line>
				<Line Number="75" Count="0">        return EXIT_FAILURE;</Line>
				<Line Number="76" Count="-1">    }</Line>
				<Line Number="77" Count="-1">}</Line>
			</Report>
		</File>
		<EndDateTime>Jan 13 21:49 CET</EndDateTime>
		<EndTime>1673642999</EndTime>
	</CoverageLog>
</Site>
