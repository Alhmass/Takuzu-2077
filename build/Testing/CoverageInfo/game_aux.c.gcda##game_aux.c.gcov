        -:    0:Source:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/lib/game_aux.c
        -:    0:Graph:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/build/CMakeFiles/game.dir/lib/game_aux.c.gcno
        -:    0:Data:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/build/CMakeFiles/game.dir/lib/game_aux.c.gcda
        -:    0:Runs:40
        -:    1:#include "takuzu.h"
        -:    2:
    #####:    3:void game_print(cgame g) {
    #####:    4:    cgame_test(g, "g is not initialized\n");
    #####:    5:    uint rows_g = (g->version == 1) ? DEFAULT_SIZE : game_nb_rows(g);
    #####:    6:    uint cols_g = (g->version == 1) ? DEFAULT_SIZE : game_nb_cols(g);
    #####:    7:    printf("cold: %d, row: %d\n", cols_g, rows_g);
    #####:    8:    printf("   ");
    #####:    9:    for (uint i = 0; i < rows_g; i++) printf("%d", i);
    #####:   10:    printf("\n   ");
    #####:   11:    for (uint i = 0; i < rows_g; i++) printf("-");
    #####:   12:    printf("\n");
    #####:   13:    for (uint i = 0; i < rows_g; i++) {
    #####:   14:        printf("%d |", i);
    #####:   15:        for (uint j = 0; j < cols_g; j++) {
    #####:   16:            square s = game_get_square(g, i, j);
    #####:   17:            if (s == S_EMPTY)
    #####:   18:                printf(" ");
    #####:   19:            else if (s == S_ZERO)
    #####:   20:                printf("w");
    #####:   21:            else if (s == S_ONE)
    #####:   22:                printf("b");
    #####:   23:            else if (s == S_IMMUTABLE_ZERO)
    #####:   24:                printf("W");
    #####:   25:            else if (s == S_IMMUTABLE_ONE)
    #####:   26:                printf("B");
        -:   27:        }
    #####:   28:        printf("|\n");
        -:   29:    }
    #####:   30:    printf("   ");
    #####:   31:    for (uint i = 0; i < rows_g; i++) printf("-");
    #####:   32:    printf("\n");
    #####:   33:}
        -:   34:
       14:   35:game game_default(void) {
       14:   36:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,
        -:   37:                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};
       14:   38:    game g = game_new(squares);
       14:   39:    game_test(g, "g is not initialized\n");
       14:   40:    return g;
        -:   41:}
        -:   42:
        6:   43:game game_default_solution(void) {
        6:   44:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 4, 3, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 3, 1, 2, 3, 2,
        -:   45:                                                   2, 3, 4, 1, 1, 2, 1, 2, 4, 1, 2, 3, 2, 1, 1, 2, 2, 3};
        6:   46:    game g = game_new(squares);
        6:   47:    game_test(g, "g is not initialized\n");
        6:   48:    return g;
        -:   49:}
