        -:    0:Source:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/tests/test_game.c
        -:    0:Graph:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/build/CMakeFiles/test_game.dir/tests/test_game.c.gcno
        -:    0:Data:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/build/CMakeFiles/test_game.dir/tests/test_game.c.gcda
        -:    0:Runs:34
        -:    1:#include "takuzu.h"
        -:    2:
        2:    3:bool test_game_new(void) {
        2:    4:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,
        -:    5:                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};
        2:    6:    game g = game_new(squares);
        2:    7:    game g2 = game_default();
        -:    8:
        2:    9:    if (g == NULL || g2 == NULL)
    #####:   10:        return false;
        2:   11:    if (!game_equal(g, g2)) {
    #####:   12:        game_delete(g);
    #####:   13:        game_delete(g2);
    #####:   14:        return false;
        -:   15:    }
        2:   16:    game_delete(g);
        2:   17:    game_delete(g2);
        2:   18:    return true;
        -:   19:}
        -:   20:
        2:   21:bool test_game_new_empty(void) {
        2:   22:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        -:   23:                                                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        2:   24:    game g1 = game_new(squares);
        2:   25:    game g2 = game_new_empty();
        -:   26:
        2:   27:    if (g1 == NULL || g2 == NULL)
    #####:   28:        return false;
        2:   29:    if (!game_equal(g1, g2)) {
    #####:   30:        game_delete(g1);
    #####:   31:        game_delete(g2);
    #####:   32:        return false;
        -:   33:    }
        2:   34:    game_delete(g1);
        2:   35:    game_delete(g2);
        2:   36:    return true;
        -:   37:}
        -:   38:
        2:   39:bool test_game_copy(void) {
        2:   40:    game g1 = game_default();
        2:   41:    game g1_copy = game_copy(g1);
        2:   42:    game g2 = game_new_empty_ext(8, 4, false, true);
        2:   43:    game_set_square(g2, 0, 0, S_IMMUTABLE_ZERO);
        2:   44:    game_set_square(g2, 0, 1, S_ZERO);
        2:   45:    game_set_square(g2, 0, 2, S_ONE);
        2:   46:    game_set_square(g2, 0, 3, S_ONE);
        2:   47:    game_set_square(g2, 3, 0, S_ZERO);
        2:   48:    game_set_square(g2, 3, 1, S_ZERO);
        2:   49:    game_set_square(g2, 3, 2, S_ONE);
        2:   50:    game_set_square(g2, 3, 3, S_ONE);
        2:   51:    game g2_copy = game_copy(g2);
        -:   52:
        2:   53:    if (g1 == NULL || g1_copy == NULL || g2 == NULL)
    #####:   54:        return false;
        2:   55:    if (!game_equal(g1, g1_copy)) {
    #####:   56:        game_delete(g1);
    #####:   57:        game_delete(g1_copy);
    #####:   58:        game_delete(g2);
    #####:   59:        game_delete(g2_copy);
    #####:   60:        return false;
        -:   61:    }
        2:   62:    game_set_square(g1, 0, 0, 1);
        2:   63:    if (game_equal(g1, g1_copy)) {
    #####:   64:        game_delete(g1);
    #####:   65:        game_delete(g1_copy);
    #####:   66:        game_delete(g2);
    #####:   67:        game_delete(g2_copy);
    #####:   68:        return false;
        -:   69:    }
        2:   70:    if (!game_equal(g2, g2_copy)) {
    #####:   71:        game_delete(g1);
    #####:   72:        game_delete(g1_copy);
    #####:   73:        game_delete(g2);
    #####:   74:        game_delete(g2_copy);
    #####:   75:        return false;
        -:   76:    }
        2:   77:    if (game_nb_cols(g2) != game_nb_cols(g2_copy) || game_nb_rows(g2) != game_nb_rows(g2_copy)) {
    #####:   78:        game_delete(g1);
    #####:   79:        game_delete(g1_copy);
    #####:   80:        game_delete(g2);
    #####:   81:        game_delete(g2_copy);
    #####:   82:        return (false);
        -:   83:    }
        2:   84:    if (game_is_wrapping(g2) != game_is_wrapping(g2_copy) || game_is_unique(g2) != game_is_unique(g2_copy)) {
    #####:   85:        game_delete(g1);
    #####:   86:        game_delete(g1_copy);
    #####:   87:        game_delete(g2);
    #####:   88:        game_delete(g2_copy);
    #####:   89:        return false;
        -:   90:    }
        2:   91:    game_delete(g1);
        2:   92:    game_delete(g1_copy);
        2:   93:    game_delete(g2);
        2:   94:    game_delete(g2_copy);
        2:   95:    return true;
        -:   96:}
        -:   97:
        2:   98:bool test_game_equal(void) {
        2:   99:    square squares_1[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 3, 0, 2, 3, 0,
        -:  100:                                                     0, 3, 4, 0, 1, 0, 0, 1, 4, 0, 2, 3, 0, 0, 0, 2, 0, 3};
        2:  101:    game g1 = game_new(squares_1);
        2:  102:    square squares_2[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 2, 3, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 3, 0, 2, 1, 0,
        -:  103:                                                     0, 3, 4, 0, 1, 0, 0, 1, 4, 0, 2, 3, 0, 0, 0, 2, 0, 3};
        2:  104:    game g2 = game_new(squares_2);
        -:  105:
        2:  106:    if (g1 == NULL || g2 == NULL)
    #####:  107:        return false;
        2:  108:    if (game_equal(g1, g2)) {
    #####:  109:        game_delete(g1);
    #####:  110:        game_delete(g2);
    #####:  111:        return false;
        -:  112:    }
        2:  113:    game_delete(g1);
        2:  114:    game_delete(g2);
        2:  115:    return true;
        -:  116:}
        -:  117:
        2:  118:bool test_game_delete(void) { return true; }
        -:  119:
        2:  120:bool test_game_is_empty(void) {
        2:  121:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 3, 0, 0, 3, 0,
        -:  122:                                                   0, 3, 4, 1, 0, 0, 0, 0, 4, 0, 1, 3, 0, 1, 0, 0, 0, 3};
        2:  123:    game g = game_new(squares);
        -:  124:
        2:  125:    if (!g)
    #####:  126:        return false;
        -:  127:
       14:  128:    for (uint j = 0; j < DEFAULT_SIZE; j++) {
       84:  129:        for (uint i = 0; i < DEFAULT_SIZE; i++) {
       72:  130:            if (game_get_square(g, i, j) == 0 && !game_is_empty(g, i, j)) {
    #####:  131:                game_delete(g);
    #####:  132:                return false;
        -:  133:            }
       72:  134:            if (game_get_square(g, i, j) == 1 && game_is_empty(g, i, j)) {
    #####:  135:                game_delete(g);
    #####:  136:                return false;
        -:  137:            }
        -:  138:        }
        -:  139:    }
        2:  140:    game_delete(g);
        2:  141:    return true;
        -:  142:}
        -:  143:
        2:  144:bool test_game_restart(void) {
        2:  145:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,
        -:  146:                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};
        2:  147:    game g = game_new(squares);
        -:  148:
        2:  149:    if (!g)
    #####:  150:        return false;
        -:  151:
        2:  152:    game_set_square(g, 0, 0, S_ZERO);
        2:  153:    game_set_square(g, 3, 5, S_ONE);
        2:  154:    game_restart(g);
        -:  155:
       14:  156:    for (uint i = 0; i < DEFAULT_SIZE; i++) {
       84:  157:        for (uint j = 0; j < DEFAULT_SIZE; j++) {
       72:  158:            if (game_get_square(g, i, j) != squares[DEFAULT_SIZE * i + j]) {
    #####:  159:                game_delete(g);
    #####:  160:                return false;
        -:  161:            }
        -:  162:        }
        -:  163:    }
        2:  164:    game_delete(g);
        -:  165:
        2:  166:    return true;
        -:  167:}
        -:  168:
        2:  169:bool test_game_set_square() {
        2:  170:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,
        -:  171:                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};
        2:  172:    game g = game_new(squares);
        -:  173:
        2:  174:    if (!g)
    #####:  175:        return (false);
        2:  176:    game_set_square(g, 0, 0, S_ZERO);
        2:  177:    squares[DEFAULT_SIZE * 0 + 0] = S_ZERO;
        2:  178:    game_set_square(g, 1, 0, S_ONE);
        2:  179:    squares[DEFAULT_SIZE * 1 + 0] = S_ONE;
        2:  180:    game_set_square(g, 0, 3, S_IMMUTABLE_ZERO);
        2:  181:    squares[DEFAULT_SIZE * 0 + 3] = S_IMMUTABLE_ZERO;
        2:  182:    game_set_square(g, 1, 5, S_IMMUTABLE_ONE);
        2:  183:    squares[DEFAULT_SIZE * 1 + 5] = S_IMMUTABLE_ONE;
        2:  184:    game_set_square(g, 0, 1, S_EMPTY);
        2:  185:    squares[DEFAULT_SIZE * 0 + 1] = S_EMPTY;
       14:  186:    for (int i = 0; i < DEFAULT_SIZE; i++) {
       84:  187:        for (int j = 0; j < DEFAULT_SIZE; j++) {
       72:  188:            if (game_get_square(g, i, j) != squares[DEFAULT_SIZE * i + j])
    #####:  189:                return (false);
        -:  190:        }
        -:  191:    }
        2:  192:    game_delete(g);
        2:  193:    return (true);
        -:  194:}
        -:  195:
        2:  196:bool test_game_get_square() {
        2:  197:    game g = game_default();
        2:  198:    bool status = true;
        -:  199:
        2:  200:    if (!g)
    #####:  201:        return (false);
        2:  202:    game_set_square(g, 0, 0, S_ZERO);
        2:  203:    game_set_square(g, 1, 0, S_ONE);
        2:  204:    game_set_square(g, 0, 3, S_IMMUTABLE_ZERO);
        2:  205:    game_set_square(g, 1, 5, S_IMMUTABLE_ONE);
        2:  206:    game_set_square(g, 0, 1, S_EMPTY);
        2:  207:    if (game_get_square(g, 0, 0) != S_ZERO)
    #####:  208:        status = false;
        2:  209:    else if (game_get_square(g, 1, 0) != S_ONE)
    #####:  210:        status = false;
        2:  211:    else if (game_get_square(g, 0, 3) != S_IMMUTABLE_ZERO)
    #####:  212:        status = false;
        2:  213:    else if (game_get_square(g, 1, 5) != S_IMMUTABLE_ONE)
    #####:  214:        status = false;
        2:  215:    else if (game_get_square(g, 0, 1) != S_EMPTY)
    #####:  216:        status = false;
        2:  217:    game_delete(g);
        2:  218:    return (status);
        -:  219:}
        -:  220:
        2:  221:bool test_game_get_number() {
        2:  222:    game g = game_default();
        2:  223:    bool status = true;
        -:  224:
        2:  225:    if (!g)
    #####:  226:        return (false);
        2:  227:    game_set_square(g, 0, 3, S_ONE);
        2:  228:    game_set_square(g, 0, 4, S_ZERO);
        2:  229:    if (game_get_number(g, 0, 1) != 1)
    #####:  230:        status = false;
        2:  231:    else if (game_get_number(g, 0, 0) != -1)
    #####:  232:        status = false;
        2:  233:    else if (game_get_number(g, 2, 1) != 0)
    #####:  234:        status = false;
        2:  235:    else if (game_get_number(g, 0, 3) != 1)
    #####:  236:        status = false;
        2:  237:    else if (game_get_number(g, 0, 4) != 0)
    #####:  238:        status = false;
        2:  239:    game_delete(g);
        2:  240:    return (status);
        -:  241:}
        -:  242:
        2:  243:bool test_game_get_next_square() {
        2:  244:    game g = game_default();
        2:  245:    game g2 = game_new_empty_ext(12, 12, true, false);
        2:  246:    bool status = true;
        -:  247:
        2:  248:    if (!g)
    #####:  249:        return (false);
        2:  250:    if (!g2)
    #####:  251:        return (false);
        2:  252:    game_set_square(g, 0, 3, S_ZERO);
        2:  253:    game_set_square(g, 0, 4, S_ONE);
        2:  254:    game_set_square(g2, 0, 1, S_ONE);
        2:  255:    game_set_square(g2, 0, 2, S_ONE);
        2:  256:    game_set_square(g2, 0, 10, S_ZERO);
        2:  257:    game_set_square(g2, 0, 5, S_ZERO);
        2:  258:    game_set_square(g2, 10, 0, S_ZERO);
        2:  259:    game_set_square(g2, 5, 0, S_ZERO);
        2:  260:    game_set_square(g2, 0, 11, S_ZERO);
        2:  261:    if (game_get_next_square(g, 0, 0, RIGHT, 1) != S_IMMUTABLE_ONE)
    #####:  262:        status = false;
        2:  263:    else if (game_get_next_square(g, 0, 0, RIGHT, 2) != S_IMMUTABLE_ZERO)
    #####:  264:        status = false;
        2:  265:    else if (game_get_next_square(g, 0, 0, DOWN, 1) != S_EMPTY)
    #####:  266:        status = false;
        2:  267:    else if (game_get_next_square(g, 3, 0, LEFT, 2) != -1)
    #####:  268:        status = false;
        2:  269:    else if (game_get_next_square(g, 2, 1, UP, 2) != S_IMMUTABLE_ONE)
    #####:  270:        status = false;
        2:  271:    else if (game_get_next_square(g, 0, 1, RIGHT, 2) != S_ZERO)
    #####:  272:        status = false;
        2:  273:    else if (game_get_next_square(g, 0, 5, LEFT, 1) != S_ONE)
    #####:  274:        status = false;
        2:  275:    else if (game_get_next_square(g2, 0, 11, RIGHT, 2) != S_ONE)
    #####:  276:        status = false;
        2:  277:    else if (game_get_next_square(g2, 11, 2, DOWN, 1) != S_ONE)
    #####:  278:        status = false;
        2:  279:    else if (game_get_next_square(g2, 0, 0, UP, 2) != S_ZERO)
    #####:  280:        status = false;
        2:  281:    else if (game_get_next_square(g2, 0, 0, LEFT, 2) != S_ZERO)
    #####:  282:        status = false;
        2:  283:    else if (game_get_next_square(g2, 0, 6, LEFT, 1) != S_ZERO)
    #####:  284:        status = false;
        2:  285:    else if (game_get_next_square(g2, 6, 0, UP, 1) != S_ZERO)
    #####:  286:        status = false;
        2:  287:    else if (game_get_next_square(g2, 0, 1, LEFT, 2) != S_ZERO)
    #####:  288:        status = false;
        2:  289:    game_delete(g);
        2:  290:    game_delete(g2);
        2:  291:    return (status);
        -:  292:}
        -:  293:
        2:  294:bool test_game_get_next_number() {
        2:  295:    game g = game_default();
        2:  296:    game g2 = game_new_empty_ext(12, 12, true, false);
        2:  297:    bool status = true;
        -:  298:
        2:  299:    if (!g)
    #####:  300:        return (false);
        2:  301:    if (!g2)
    #####:  302:        return (false);
        2:  303:    game_set_square(g, 0, 3, S_ZERO);
        2:  304:    game_set_square(g, 0, 4, S_ONE);
        2:  305:    game_set_square(g2, 0, 1, S_ONE);
        2:  306:    game_set_square(g2, 0, 2, S_ONE);
        2:  307:    game_set_square(g2, 0, 10, S_ZERO);
        2:  308:    game_set_square(g2, 0, 5, S_ZERO);
        2:  309:    game_set_square(g2, 10, 0, S_ZERO);
        2:  310:    game_set_square(g2, 5, 0, S_ZERO);
        2:  311:    game_set_square(g2, 0, 11, S_ZERO);
        -:  312:
        2:  313:    if (game_get_next_number(g, 0, 0, RIGHT, 1) != 1)
    #####:  314:        status = false;
        2:  315:    else if (game_get_next_number(g, 0, 0, RIGHT, 2) != 0)
    #####:  316:        status = false;
        2:  317:    else if (game_get_next_number(g, 0, 0, DOWN, 1) != -1)
    #####:  318:        status = false;
        2:  319:    else if (game_get_next_number(g, 3, 0, LEFT, 2) != -1)
    #####:  320:        status = false;
        2:  321:    else if (game_get_next_number(g, 2, 1, UP, 2) != 1)
    #####:  322:        status = false;
        2:  323:    else if (game_get_next_number(g, 0, 1, RIGHT, 2) != 0)
    #####:  324:        status = false;
        2:  325:    else if (game_get_next_number(g, 0, 5, LEFT, 1) != 1)
    #####:  326:        status = false;
        2:  327:    else if (game_get_next_number(g2, 0, 11, RIGHT, 2) != 1)
    #####:  328:        status = false;
        2:  329:    else if (game_get_next_number(g2, 11, 2, DOWN, 1) != 1)
    #####:  330:        status = false;
        2:  331:    else if (game_get_next_number(g2, 0, 0, UP, 2) != 0)
    #####:  332:        status = false;
        2:  333:    else if (game_get_next_number(g2, 0, 0, LEFT, 2) != 0)
    #####:  334:        status = false;
        2:  335:    else if (game_get_next_number(g2, 0, 6, LEFT, 1) != 0)
    #####:  336:        status = false;
        2:  337:    else if (game_get_next_number(g2, 6, 0, UP, 1) != 0)
    #####:  338:        status = false;
        2:  339:    else if (game_get_next_number(g2, 0, 1, LEFT, 2) != 0)
    #####:  340:        status = false;
        2:  341:    game_delete(g);
        2:  342:    game_delete(g2);
        2:  343:    return (status);
        -:  344:}
        -:  345:
        2:  346:bool test_game_is_immutable() {
        2:  347:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,
        -:  348:                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};
        2:  349:    game g = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);
        -:  350:
        2:  351:    if (!g)
    #####:  352:        return false;
       14:  353:    for (uint i = 0; i < DEFAULT_SIZE; i++) {
       84:  354:        for (uint j = 0; j < DEFAULT_SIZE; j++) {
       90:  355:            if (game_is_immutable(g, i, j) &&
       30:  356:                (game_get_square(g, i, j) != S_IMMUTABLE_ONE && game_get_square(g, i, j) != S_IMMUTABLE_ZERO)) {
    #####:  357:                game_delete(g);
    #####:  358:                return false;
      126:  359:            } else if (!(game_is_immutable(g, i, j)) &&
      108:  360:                       (game_get_square(g, i, j) == S_IMMUTABLE_ONE || game_get_square(g, i, j) == S_IMMUTABLE_ZERO)) {
    #####:  361:                game_delete(g);
    #####:  362:                return false;
        -:  363:            }
        -:  364:        }
        -:  365:    }
        2:  366:    game_delete(g);
        2:  367:    return true;
        -:  368:}
        -:  369:
        2:  370:bool test_game_has_error() {
        2:  371:    game g1 = game_default_solution();
        2:  372:    square squares_2[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2,
        -:  373:                                                     4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3};
        2:  374:    game g2 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_2, false, false);
        2:  375:    if (!g1 || !g2)
    #####:  376:        return false;
        -:  377:
       14:  378:    for (uint i = 0; i < DEFAULT_SIZE; i++) {
       84:  379:        for (uint j = 0; j < DEFAULT_SIZE; j++) {
       72:  380:            if (game_has_error(g1, i, j) || !game_has_error(g2, i, j)) {
    #####:  381:                game_delete(g1);
    #####:  382:                game_delete(g2);
    #####:  383:                return false;
        -:  384:            }
        -:  385:        }
        -:  386:    }
        2:  387:    game_delete(g1);
        2:  388:    game_delete(g2);
        -:  389:
        2:  390:    square squares_4[DEFAULT_SIZE * DEFAULT_SIZE] = {2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2,
        -:  391:                                                     2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2};
        2:  392:    game g4 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_4, false, true);
       14:  393:    for (uint i = 0; i < DEFAULT_SIZE; i++) {
       84:  394:        for (uint j = 0; j < DEFAULT_SIZE; j++) {
       72:  395:            if (!game_has_error(g4, i, j)) {
    #####:  396:                game_delete(g4);
    #####:  397:                return false;
        -:  398:            }
        -:  399:        }
        -:  400:    }
        2:  401:    game_delete(g4);
        2:  402:    return true;
        -:  403:}
        -:  404:
        2:  405:bool test_game_check_move() {
        2:  406:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,
        -:  407:                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};
        2:  408:    game g = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);
        2:  409:    if (!g)
    #####:  410:        return false;
        2:  411:    if (game_check_move(g, 0, 0, S_IMMUTABLE_ZERO))
    #####:  412:        return false;
       14:  413:    for (uint i = 0; i < DEFAULT_SIZE; i++) {
       84:  414:        for (uint j = 0; j < DEFAULT_SIZE; j++) {
      126:  415:            if (game_check_move(g, i, j, S_EMPTY) &&
      108:  416:                (game_get_square(g, i, j) == S_IMMUTABLE_ONE || game_get_square(g, i, j) == S_IMMUTABLE_ZERO)) {
    #####:  417:                game_delete(g);
    #####:  418:                return false;
       90:  419:            } else if (!(game_check_move(g, i, j, S_EMPTY)) &&
       30:  420:                       (game_get_square(g, i, j) != S_IMMUTABLE_ONE && game_get_square(g, i, j) != S_IMMUTABLE_ZERO)) {
    #####:  421:                game_delete(g);
    #####:  422:                return false;
        -:  423:            }
        -:  424:        }
        -:  425:    }
        2:  426:    game_delete(g);
        2:  427:    return true;
        -:  428:}
        -:  429:
        2:  430:bool test_game_play_move() {
        2:  431:    square squares[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0,
        -:  432:                                                   0, 3, 4, 0, 0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3};
        2:  433:    game g = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);
        -:  434:    // game g2 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares, false, false);
        -:  435:
        2:  436:    if (!g)
    #####:  437:        return (false);
        -:  438:    square q;
       14:  439:    for (uint i = 0; i < DEFAULT_SIZE; i++) {
       44:  440:        for (uint j = 0; j < DEFAULT_SIZE; j++) {
       42:  441:            q = game_get_square(g, i, j);
       42:  442:            if (q == S_IMMUTABLE_ONE || q == S_IMMUTABLE_ZERO) {
        -:  443:                break;
        -:  444:            } else {
       32:  445:                game_play_move(g, i, j, S_ONE);
        -:  446:            }
      32*:  447:            if ((q == S_IMMUTABLE_ONE || q == S_IMMUTABLE_ZERO) && q != game_get_square(g, i, j)) {
    #####:  448:                game_delete(g);
    #####:  449:                return false;
        -:  450:            }
       32:  451:            if ((q != S_IMMUTABLE_ONE && q != S_IMMUTABLE_ZERO) && q == game_get_square(g, i, j)) {
    #####:  452:                game_delete(g);
    #####:  453:                return false;
        -:  454:            }
        -:  455:        }
        -:  456:    }
        2:  457:    game_delete(g);
        2:  458:    return true;
        -:  459:}
        -:  460:
        2:  461:bool test_game_is_over() {
        2:  462:    game g1 = game_default_solution();
        2:  463:    square squares_2[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 1, 2, 2, 3, 3, 4, 4, 1, 1, 2, 2, 3, 3, 4, 4, 1, 1,
        -:  464:                                                     2, 2, 3, 3, 4, 4, 1, 1, 2, 2, 3, 3, 4, 4, 1, 1, 2, 2};
        2:  465:    game g2 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_2, false, false);
        2:  466:    square squares_3[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2,
        -:  467:                                                     4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3, 4, 4, 4, 3, 3, 3};
        2:  468:    game g3 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_3, false, false);
        2:  469:    square squares_4[DEFAULT_SIZE * DEFAULT_SIZE] = {1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 2, 3, 4, 1, 2, 3,
        -:  470:                                                     4, 1, 2, 3, 4, 1, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2};
        2:  471:    game g4 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_4, false, false);
        2:  472:    square squares_5[DEFAULT_SIZE * DEFAULT_SIZE] = {0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1,
        -:  473:                                                     1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0};
        2:  474:    game g5 = game_new_ext(DEFAULT_SIZE, DEFAULT_SIZE, squares_5, false, false);
        -:  475:
        2:  476:    if (!g1 || !g2 || !g3 || !g4 || !g5)
    #####:  477:        return false;
        -:  478:
        2:  479:    if (!game_is_over(g1) || game_is_over(g2) || game_is_over(g3) || game_is_over(g4) || game_is_over(g5)) {
    #####:  480:        game_delete(g1);
    #####:  481:        game_delete(g2);
    #####:  482:        game_delete(g3);
    #####:  483:        game_delete(g4);
    #####:  484:        game_delete(g5);
    #####:  485:        return false;
        -:  486:    }
        2:  487:    game_delete(g1);
        2:  488:    game_delete(g2);
        2:  489:    game_delete(g3);
        2:  490:    game_delete(g4);
        2:  491:    game_delete(g5);
        2:  492:    return true;
        -:  493:}
        -:  494:
        -:  495:/*  USAGE  */
    #####:  496:void usage(char *argv[]) {
    #####:  497:    fprintf(stderr, "Usage: %s <testname> [<...>]\n", argv[0]);
    #####:  498:    exit(EXIT_FAILURE);
        -:  499:}
        -:  500:
        -:  501:/*  MAIN ROUTINE  */
       34:  502:int main(int argc, char *argv[]) {
       34:  503:    if (argc == 1)
    #####:  504:        usage(argv);
        -:  505:
       34:  506:    fprintf(stderr, "=> Start test \"%s\"\n", argv[1]);
       34:  507:    bool pass = false;
       34:  508:    if (strcmp("game_new", argv[1]) == 0)
        2:  509:        pass = test_game_new();
       32:  510:    else if (strcmp("game_new_empty", argv[1]) == 0)
        2:  511:        pass = test_game_new_empty();
       30:  512:    else if (strcmp("game_copy", argv[1]) == 0)
        2:  513:        pass = test_game_copy();
       28:  514:    else if (strcmp("game_equal", argv[1]) == 0)
        2:  515:        pass = test_game_equal();
       26:  516:    else if (strcmp("game_delete", argv[1]) == 0)
        2:  517:        pass = test_game_delete();
       24:  518:    else if (strcmp("game_is_empty", argv[1]) == 0)
        2:  519:        pass = test_game_is_empty();
       22:  520:    else if (strcmp("game_restart", argv[1]) == 0)
        2:  521:        pass = test_game_restart();
       20:  522:    else if (strcmp("game_set_square", argv[1]) == 0)
        2:  523:        pass = test_game_set_square();
       18:  524:    else if (strcmp("game_get_square", argv[1]) == 0)
        2:  525:        pass = test_game_get_square();
       16:  526:    else if (strcmp("game_get_number", argv[1]) == 0)
        2:  527:        pass = test_game_get_number();
       14:  528:    else if (strcmp("game_get_next_square", argv[1]) == 0)
        2:  529:        pass = test_game_get_next_square();
       12:  530:    else if (strcmp("game_get_next_number", argv[1]) == 0)
        2:  531:        pass = test_game_get_next_number();
       10:  532:    else if (strcmp("game_is_immutable", argv[1]) == 0)
        2:  533:        pass = test_game_is_immutable();
        8:  534:    else if (strcmp("game_has_error", argv[1]) == 0)
        2:  535:        pass = test_game_has_error();
        6:  536:    else if (strcmp("game_check_move", argv[1]) == 0)
        2:  537:        pass = test_game_check_move();
        4:  538:    else if (strcmp("game_play_move", argv[1]) == 0)
        2:  539:        pass = test_game_play_move();
        2:  540:    else if (strcmp("game_is_over", argv[1]) == 0)
        2:  541:        pass = test_game_is_over();
        -:  542:    else {
    #####:  543:        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);
    #####:  544:        exit(EXIT_FAILURE);
        -:  545:    }
        -:  546:
       34:  547:    if (pass == true) {
       34:  548:        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);
       34:  549:        return EXIT_SUCCESS;
        -:  550:    } else {
    #####:  551:        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);
    #####:  552:        return EXIT_FAILURE;
        -:  553:    }
        -:  554:}
