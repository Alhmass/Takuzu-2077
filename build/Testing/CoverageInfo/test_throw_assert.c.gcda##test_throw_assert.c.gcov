        -:    0:Source:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/tests/test_throw_assert.c
        -:    0:Graph:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/build/CMakeFiles/test_throw_assert.dir/tests/test_throw_assert.c.gcno
        -:    0:Data:/mnt/c/Users/Alexandre L-P/Documents/takuzu-01c/build/CMakeFiles/test_throw_assert.dir/tests/test_throw_assert.c.gcda
        -:    0:Runs:8
        -:    1:#include "takuzu.h"
        -:    2:
        2:    3:bool test_throw_error() {
        2:    4:    char *msg = NULL;
        2:    5:    if (!throw_error(msg)) {
        2:    6:        return true;
        -:    7:    }
        -:    8:    // Never executed
    #####:    9:    return false;
        -:   10:}
        -:   11:
        2:   12:bool test_game_test() {
        2:   13:    game g = game_new_empty();
        2:   14:    char *msg = NULL;
        2:   15:    if (game_test(g, msg)) {
        2:   16:        game_delete(g);
        2:   17:        return true;
        -:   18:    }
        -:   19:    // Never executed
    #####:   20:    return false;
        -:   21:}
        -:   22:
        2:   23:bool test_cgame_test() {
        2:   24:    game g = game_new_empty();
        2:   25:    char *msg = NULL;
        2:   26:    if (cgame_test(g, msg)) {
        2:   27:        game_delete(g);
        2:   28:        return true;
        -:   29:    }
        -:   30:    // Never executed
    #####:   31:    return false;
        -:   32:}
        -:   33:
        2:   34:bool test_pointer_test() {
        2:   35:    char *ptr = malloc(sizeof *ptr);
        2:   36:    char *msg = NULL;
        2:   37:    if (pointer_test(ptr, msg)) {
        2:   38:        free(ptr);
        2:   39:        return true;
        -:   40:    }
        -:   41:    // Never executed
    #####:   42:    return false;
        -:   43:}
        -:   44:
        -:   45:/*  USAGE  */
    #####:   46:void usage(char *argv[]) {
    #####:   47:    fprintf(stderr, "Usage: %s <testname> [<...>]\n", argv[0]);
    #####:   48:    exit(EXIT_FAILURE);
        -:   49:}
        -:   50:
        -:   51:/*  MAIN ROUTINE  */
        8:   52:int main(int argc, char *argv[]) {
        8:   53:    if (argc == 1)
    #####:   54:        usage(argv);
        -:   55:
        8:   56:    fprintf(stderr, "=> Start test \"%s\"\n", argv[1]);
        8:   57:    bool pass = false;
        8:   58:    if (strcmp("throw_error", argv[1]) == 0)
        2:   59:        pass = test_throw_error();
        6:   60:    else if (strcmp("game_test", argv[1]) == 0)
        2:   61:        pass = test_game_test();
        4:   62:    else if (strcmp("cgame_test", argv[1]) == 0)
        2:   63:        pass = test_cgame_test();
        2:   64:    else if (strcmp("pointer_test", argv[1]) == 0)
        2:   65:        pass = test_pointer_test();
        -:   66:    else {
    #####:   67:        fprintf(stderr, "Error: test \"%s\" not found!\n", argv[1]);
    #####:   68:        exit(EXIT_FAILURE);
        -:   69:    }
        -:   70:
        8:   71:    if (pass == true) {
        8:   72:        fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);
        8:   73:        return EXIT_SUCCESS;
        -:   74:    } else {
    #####:   75:        fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);
    #####:   76:        return EXIT_FAILURE;
        -:   77:    }
        -:   78:}
